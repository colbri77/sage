/* Generated by Cython 0.20.1 on Fri Oct  3 23:08:00 2014 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__sage__borderbasis__cppWrapper
#define __PYX_HAVE_API__sage__borderbasis__cppWrapper
#include "stdint.h"
#include "src/include/i_owningList.h"
#include "src/include/i_monomial.h"
#include "src/include/term.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "src/include/statistics.h"
#include "src/include/monomialFactory.h"
#include "src/include/i_polynomial.h"
#include "src/include/owningVector.h"
#include "src/include/polynomialFactory.h"
#include "src/include/field.h"
#include "src/include/i_matrixFactory.h"
#include "src/include/matrixFactory_fn.h"
#include "src/include/borderBasisTools.h"
#include "string.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "cppWrapper.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig;
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;

/* "sage/borderbasis/cppWrapper.pxd":3
 * from c_src cimport *
 * 
 * cdef class PyIOwningList_pol:             # <<<<<<<<<<<<<<
 *     cdef IOwningList[IPolynomial_uint64*]* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol {
  PyObject_HEAD
  base::IOwningList<polynomial::IPolynomial_uint64 *> *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":6
 *     cdef IOwningList[IPolynomial_uint64*]* thisptr
 * 
 * cdef class PyIPolynomial_uint64:             # <<<<<<<<<<<<<<
 *     cdef IPolynomial[uint64_t]* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 {
  PyObject_HEAD
  polynomial::IPolynomial<uint64_t> *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":9
 *     cdef IPolynomial[uint64_t]* thisptr
 * 
 * cdef class PyMonomialFactory:             # <<<<<<<<<<<<<<
 *     cdef IMonomialFactory* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory {
  PyObject_HEAD
  polynomial::IMonomialFactory *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":12
 *     cdef IMonomialFactory* thisptr
 * 
 * cdef class PyPolynomialFactory_uint64:             # <<<<<<<<<<<<<<
 *     cdef PolynomialFactory[uint64_t]* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 {
  PyObject_HEAD
  polynomial::PolynomialFactory<uint64_t> *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":15
 *     cdef PolynomialFactory[uint64_t]* thisptr
 * 
 * cdef class PyField_uint64:             # <<<<<<<<<<<<<<
 *     cdef IField[uint64_t]* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 {
  PyObject_HEAD
  math::IField<uint64_t> *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":18
 *     cdef IField[uint64_t]* thisptr
 * 
 * cdef class PyFieldFn(PyField_uint64):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 __pyx_base;
};


/* "sage/borderbasis/cppWrapper.pxd":21
 *     pass
 * 
 * cdef class PyMatrixFactory_uint64:             # <<<<<<<<<<<<<<
 *     cdef IMatrixFactory[uint64_t]* thisptr
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 {
  PyObject_HEAD
  math::IMatrixFactory<uint64_t> *thisptr;
};


/* "sage/borderbasis/cppWrapper.pxd":24
 *     cdef IMatrixFactory[uint64_t]* thisptr
 * 
 * cdef class PyMatrixFactory_Fn_uint64(PyMatrixFactory_uint64):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 __pyx_base;
};


/* "sage/borderbasis/cppWrapper.pxd":27
 *     pass
 * 
 * cdef class PyBBConfig:             # <<<<<<<<<<<<<<
 *     cdef BBConfig* thisptr
 *     cdef bool* exclusions
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig {
  PyObject_HEAD
  borderbasis::BBConfig *thisptr;
  bool *exclusions;
};


/* "sage/borderbasis/cppWrapper.pxd":31
 *     cdef bool* exclusions
 * 
 * cdef class PyBorderBasisTools_uint64:             # <<<<<<<<<<<<<<
 *     cdef BorderBasisTools[uint64_t]* thisptr
 *     cdef PyField_uint64 field
 */
struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 {
  PyObject_HEAD
  struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_vtab;
  borderbasis::BorderBasisTools<uint64_t> *thisptr;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *field;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *matrixFactory;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *polFactory;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *monFactory;
  PyObject *indet;
  PyObject *optimizations;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *cfg;
};



/* "sage/borderbasis/cppWrapper.pyx":119
 *         free(self.exclusions)
 * 
 * cdef class PyBorderBasisTools_uint64:             # <<<<<<<<<<<<<<
 *     r"""
 *     Wrapping class for the C++ class ``BorderBasisTools``
 */

struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 {
  PyObject *(*get_statistics)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, int __pyx_skip_dispatch);
  PyObject *(*calculate_basis)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *(*_to_native_pol_list)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *);
  PyObject *(*_from_native_pol_list)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *, PyObject *, PyObject *);
  PyObject *(*_from_native_pol)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *, PyObject *, PyObject *);
  PyObject *(*_get_dict)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *, PyObject *);
  PyObject *(*_get_variables)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *);
};
static struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_vtabptr_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp' */

/* Module declarations from 'sage.borderbasis.c_src' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'sage.borderbasis.cppWrapper' */
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMonomialFactory = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyField_uint64 = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyFieldFn = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyBBConfig = 0;
static PyTypeObject *__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 = 0;
#define __Pyx_MODULE_NAME "sage.borderbasis.cppWrapper"
int __pyx_module_is_main_sage__borderbasis__cppWrapper = 0;

/* Implementation of 'sage.borderbasis.cppWrapper' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_self, PyObject *__pyx_v_use_positions, PyObject *__pyx_v_indet, PyObject *__pyx_v_gf2, PyObject *__pyx_v_order); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_self, PyObject *__pyx_v_gf2); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_14PyField_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *__pyx_v_self, PyObject *__pyx_v_isNull, PyObject *__pyx_v_minPolynomial); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *__pyx_v_self, PyObject *__pyx_v_isNull, PyObject *__pyx_v_minPolynomial); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *__pyx_v_self, PyObject *__pyx_v_indet, enum borderbasis::OptLevel __pyx_v_opt, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_mFac, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFac, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFac, PyObject *__pyx_v_use_pol_ex, PyObject *__pyx_v_use_variable_exclusion, PyObject *__pyx_v_variable_exclusions, PyObject *__pyx_v_use_gf2_reductions, PyObject *__pyx_v_min_mutants_limit); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *__pyx_v_self); /* proto */
static int __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_matrixFactory, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFactory, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFactory, PyObject *__pyx_v_indeterminates, PyObject *__pyx_v_optimizations, PyObject *__pyx_v_use_pol_exclusion, PyObject *__pyx_v_use_variable_exclusion, PyObject *__pyx_v_variable_exclusions, PyObject *__pyx_v_use_gf2_reductions, PyObject *__pyx_v_min_mutants_limit); /* proto */
static void __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_4get_statistics(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_6calculate_basis(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_generators); /* proto */
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMonomialFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyField_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyFieldFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBBConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_s[] = "%s";
static char __pyx_k_gf2[] = "gf2";
static char __pyx_k_opt[] = "opt";
static char __pyx_k_var[] = "var";
static char __pyx_k_gens[] = "gens";
static char __pyx_k_mFac[] = "mFac";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_none[] = "none";
static char __pyx_k_ring[] = "ring";
static char __pyx_k_rows[] = "rows";
static char __pyx_k_field[] = "field";
static char __pyx_k_indet[] = "indet";
static char __pyx_k_order[] = "order";
static char __pyx_k_range[] = "range";
static char __pyx_k_terms[] = "terms";
static char __pyx_k_deglex[] = "deglex";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_isNull[] = "isNull";
static char __pyx_k_monFac[] = "monFac";
static char __pyx_k_mutant[] = "mutant";
static char __pyx_k_polFac[] = "polFac";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_columns[] = "columns";
static char __pyx_k_unknown[] = "\" unknown";
static char __pyx_k_enhanced[] = "enhanced";
static char __pyx_k_int_repr[] = "int_repr";
static char __pyx_k_base_ring[] = "base_ring";
static char __pyx_k_degrevlex[] = "degrevlex";
static char __pyx_k_exponents[] = "exponents";
static char __pyx_k_fetch_int[] = "fetch_int";
static char __pyx_k_maxMatrix[] = "maxMatrix";
static char __pyx_k_monomials[] = "monomials";
static char __pyx_k_variables[] = "variables";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_monFactory[] = "monFactory";
static char __pyx_k_optimistic[] = "optimistic";
static char __pyx_k_polFactory[] = "polFactory";
static char __pyx_k_polynomial[] = "polynomial";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_use_pol_ex[] = "use_pol_ex";
static char __pyx_k_coefficients[] = "coefficients";
static char __pyx_k_experimental[] = "experimental";
static char __pyx_k_matrixFactory[] = "matrixFactory";
static char __pyx_k_minPolynomial[] = "minPolynomial";
static char __pyx_k_optimizations[] = "optimizations";
static char __pyx_k_use_positions[] = "use_positions";
static char __pyx_k_get_statistics[] = "get_statistics";
static char __pyx_k_indeterminates[] = "indeterminates";
static char __pyx_k_maxComparisons[] = "maxComparisons";
static char __pyx_k_calculate_basis[] = "calculate_basis";
static char __pyx_k_improved_mutant[] = "improved_mutant";
static char __pyx_k_BooleanPolynomial[] = "BooleanPolynomial";
static char __pyx_k_min_mutants_limit[] = "min_mutants_limit";
static char __pyx_k_sage_calculus_var[] = "sage.calculus.var";
static char __pyx_k_use_pol_exclusion[] = "use_pol_exclusion";
static char __pyx_k_PolynomialSequence[] = "PolynomialSequence";
static char __pyx_k_optimization_value[] = "optimization value \"";
static char __pyx_k_use_gf2_reductions[] = "use_gf2_reductions";
static char __pyx_k_variable_exclusions[] = "variable_exclusions";
static char __pyx_k_improved_mutant_linear[] = "improved_mutant_linear";
static char __pyx_k_use_variable_exclusion[] = "use_variable_exclusion";
static char __pyx_k_improved_mutant_optimistic[] = "improved_mutant_optimistic";
static char __pyx_k_sage_rings_polynomial_pbori[] = "sage.rings.polynomial.pbori";
static char __pyx_k_File_sage_borderbasis_cppWrapper[] = "File: sage/borderbasis/cppWrapper.pyx (starting at line 1)\n\nWrapping classes for the border basis algorithm in C++, located under src/\n\nInternal use only!\n\nAUTHORS:\n\n- Christian Olbrich (2014): initial version\n";
static char __pyx_k_sage_rings_polynomial_multi_poly[] = "sage.rings.polynomial.multi_polynomial_sequence";
static char __pyx_k_sage_symbolic_expression_convers[] = "sage.symbolic.expression_conversions";
static PyObject *__pyx_n_s_BooleanPolynomial;
static PyObject *__pyx_n_s_PolynomialSequence;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_base_ring;
static PyObject *__pyx_n_s_calculate_basis;
static PyObject *__pyx_n_s_coefficients;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_deglex;
static PyObject *__pyx_n_s_degrevlex;
static PyObject *__pyx_n_s_enhanced;
static PyObject *__pyx_n_s_experimental;
static PyObject *__pyx_n_s_exponents;
static PyObject *__pyx_n_s_fetch_int;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_gens;
static PyObject *__pyx_n_s_get_statistics;
static PyObject *__pyx_n_s_gf2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_improved_mutant;
static PyObject *__pyx_n_s_improved_mutant_linear;
static PyObject *__pyx_n_s_improved_mutant_optimistic;
static PyObject *__pyx_n_s_indet;
static PyObject *__pyx_n_s_indeterminates;
static PyObject *__pyx_n_s_int_repr;
static PyObject *__pyx_n_s_isNull;
static PyObject *__pyx_n_s_mFac;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrixFactory;
static PyObject *__pyx_n_s_maxComparisons;
static PyObject *__pyx_n_s_maxMatrix;
static PyObject *__pyx_n_s_minPolynomial;
static PyObject *__pyx_n_s_min_mutants_limit;
static PyObject *__pyx_n_s_monFac;
static PyObject *__pyx_n_s_monFactory;
static PyObject *__pyx_n_s_monomials;
static PyObject *__pyx_n_s_mutant;
static PyObject *__pyx_n_s_none;
static PyObject *__pyx_n_s_opt;
static PyObject *__pyx_n_s_optimistic;
static PyObject *__pyx_kp_s_optimization_value;
static PyObject *__pyx_n_s_optimizations;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_s_polFac;
static PyObject *__pyx_n_s_polFactory;
static PyObject *__pyx_n_s_polynomial;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ring;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_n_s_sage_calculus_var;
static PyObject *__pyx_n_s_sage_rings_polynomial_multi_poly;
static PyObject *__pyx_n_s_sage_rings_polynomial_pbori;
static PyObject *__pyx_n_s_sage_symbolic_expression_convers;
static PyObject *__pyx_n_s_terms;
static PyObject *__pyx_kp_s_unknown;
static PyObject *__pyx_n_s_use_gf2_reductions;
static PyObject *__pyx_n_s_use_pol_ex;
static PyObject *__pyx_n_s_use_pol_exclusion;
static PyObject *__pyx_n_s_use_positions;
static PyObject *__pyx_n_s_use_variable_exclusion;
static PyObject *__pyx_n_s_var;
static PyObject *__pyx_n_s_variable_exclusions;
static PyObject *__pyx_n_s_variables;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;

/* "sage/borderbasis/cppWrapper.pyx":22
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":29
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":36
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,use_positions,indet,gf2,order):             # <<<<<<<<<<<<<<
 *         if(gf2):
 *             if use_positions and order=="deglex":
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_use_positions = 0;
  PyObject *__pyx_v_indet = 0;
  PyObject *__pyx_v_gf2 = 0;
  PyObject *__pyx_v_order = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_use_positions,&__pyx_n_s_indet,&__pyx_n_s_gf2,&__pyx_n_s_order,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_positions)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indet)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gf2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_order)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_use_positions = values[0];
    __pyx_v_indet = values[1];
    __pyx_v_gf2 = values[2];
    __pyx_v_order = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyMonomialFactory.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)__pyx_v_self), __pyx_v_use_positions, __pyx_v_indet, __pyx_v_gf2, __pyx_v_order);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_self, PyObject *__pyx_v_use_positions, PyObject *__pyx_v_indet, PyObject *__pyx_v_gf2, PyObject *__pyx_v_order) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  unsigned int __pyx_t_4;
  polynomial::MonomialFactoryDegLexGF2 *__pyx_t_5;
  polynomial::MonomialFactoryNoOrderPosGF2 *__pyx_t_6;
  polynomial::MonomialFactoryDegRevLexGF2 *__pyx_t_7;
  polynomial::MonomialFactoryDegLex *__pyx_t_8;
  polynomial::MonomialFactoryNoOrderPos *__pyx_t_9;
  polynomial::MonomialFactoryDegRevLex *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":37
 *     """
 *     def __cinit__(self,use_positions,indet,gf2,order):
 *         if(gf2):             # <<<<<<<<<<<<<<
 *             if use_positions and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLexGF2(indet))
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_gf2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":38
 *     def __cinit__(self,use_positions,indet,gf2,order):
 *         if(gf2):
 *             if use_positions and order=="deglex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLexGF2(indet))
 *             elif (not use_positions) and order=="deglex":
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_1) {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_deglex, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (__pyx_t_3) {

      /* "sage/borderbasis/cppWrapper.pyx":39
 *         if(gf2):
 *             if use_positions and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLexGF2(indet))             # <<<<<<<<<<<<<<
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPosGF2(indet))
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_5 = new polynomial::MonomialFactoryDegLexGF2(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_5);
      goto __pyx_L4;
    }

    /* "sage/borderbasis/cppWrapper.pyx":40
 *             if use_positions and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLexGF2(indet))
 *             elif (not use_positions) and order=="deglex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPosGF2(indet))
 *             elif use_positions and order=="degrevlex":
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = (!__pyx_t_3);
    if (__pyx_t_1) {
      __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_deglex, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = __pyx_t_3;
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (__pyx_t_2) {

      /* "sage/borderbasis/cppWrapper.pyx":41
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLexGF2(indet))
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPosGF2(indet))             # <<<<<<<<<<<<<<
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLexGF2(indet))
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_6 = new polynomial::MonomialFactoryNoOrderPosGF2(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_6);
      goto __pyx_L4;
    }

    /* "sage/borderbasis/cppWrapper.pyx":42
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPosGF2(indet))
 *             elif use_positions and order=="degrevlex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLexGF2(indet))
 *         else:
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_degrevlex, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_3 = __pyx_t_1;
    } else {
      __pyx_t_3 = __pyx_t_2;
    }
    if (__pyx_t_3) {

      /* "sage/borderbasis/cppWrapper.pyx":43
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPosGF2(indet))
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLexGF2(indet))             # <<<<<<<<<<<<<<
 *         else:
 *             if use_positions and order=="deglex":
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_7 = new polynomial::MonomialFactoryDegRevLexGF2(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_7);
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":45
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLexGF2(indet))
 *         else:
 *             if use_positions and order=="deglex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLex(indet))
 *             elif (not use_positions) and order=="deglex":
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_3) {
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_deglex, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __pyx_t_2;
    } else {
      __pyx_t_1 = __pyx_t_3;
    }
    if (__pyx_t_1) {

      /* "sage/borderbasis/cppWrapper.pyx":46
 *         else:
 *             if use_positions and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLex(indet))             # <<<<<<<<<<<<<<
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPos(indet))
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_8 = new polynomial::MonomialFactoryDegLex(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_8);
      goto __pyx_L5;
    }

    /* "sage/borderbasis/cppWrapper.pyx":47
 *             if use_positions and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLex(indet))
 *             elif (not use_positions) and order=="deglex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPos(indet))
 *             elif use_positions and order=="degrevlex":
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = (!__pyx_t_1);
    if (__pyx_t_3) {
      __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_deglex, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = __pyx_t_1;
    } else {
      __pyx_t_2 = __pyx_t_3;
    }
    if (__pyx_t_2) {

      /* "sage/borderbasis/cppWrapper.pyx":48
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegLex(indet))
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPos(indet))             # <<<<<<<<<<<<<<
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_9 = new polynomial::MonomialFactoryNoOrderPos(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_9);
      goto __pyx_L5;
    }

    /* "sage/borderbasis/cppWrapper.pyx":49
 *             elif (not use_positions) and order=="deglex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPos(indet))
 *             elif use_positions and order=="degrevlex":             # <<<<<<<<<<<<<<
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))
 *     def __dealloc__(self):
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_use_positions); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {
      __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_order, __pyx_n_s_degrevlex, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = __pyx_t_3;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "sage/borderbasis/cppWrapper.pyx":50
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryNoOrderPos(indet))
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_10 = new polynomial::MonomialFactoryDegRevLex(__pyx_t_4);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_self->thisptr = ((polynomial::IMonomialFactory *)__pyx_t_10);
      goto __pyx_L5;
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":36
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,use_positions,indet,gf2,order):             # <<<<<<<<<<<<<<
 *         if(gf2):
 *             if use_positions and order=="deglex":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyMonomialFactory.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":51
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":52
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class PyPolynomialFactory_uint64:
 */
  delete __pyx_v_self->thisptr;

  /* "sage/borderbasis/cppWrapper.pyx":51
 *             elif use_positions and order=="degrevlex":
 *                 self.thisptr = <IMonomialFactory*>(new MonomialFactoryDegRevLex(indet))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":58
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,gf2):             # <<<<<<<<<<<<<<
 *         if(gf2):
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR_GF2)
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gf2 = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gf2,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gf2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gf2 = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyPolynomialFactory_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)__pyx_v_self), __pyx_v_gf2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_self, PyObject *__pyx_v_gf2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  polynomial::PolynomialFactory<uint64_t> *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":59
 *     """
 *     def __cinit__(self,gf2):
 *         if(gf2):             # <<<<<<<<<<<<<<
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR_GF2)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_gf2); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":60
 *     def __cinit__(self,gf2):
 *         if(gf2):
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR_GF2)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR)
 */
    try {
      __pyx_t_2 = new polynomial::PolynomialFactory<uint64_t>(polynomial::POLTYPE_VECTOR_GF2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->thisptr = __pyx_t_2;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":62
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR_GF2)
 *         else:
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
    try {
      __pyx_t_2 = new polynomial::PolynomialFactory<uint64_t>(polynomial::POLTYPE_VECTOR);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->thisptr = __pyx_t_2;
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":58
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,gf2):             # <<<<<<<<<<<<<<
 *         if(gf2):
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR_GF2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyPolynomialFactory_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":63
 *         else:
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":64
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR)
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class PyField_uint64:
 */
  delete __pyx_v_self->thisptr;

  /* "sage/borderbasis/cppWrapper.pyx":63
 *         else:
 *             self.thisptr = new PolynomialFactory[uint64_t](POLTYPE_VECTOR)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":70
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_14PyField_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_14PyField_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_14PyField_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_14PyField_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":77
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,isNull,minPolynomial):             # <<<<<<<<<<<<<<
 *         if isNull:
 *             self.thisptr = <IField[uint64_t]*>NULL
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isNull = 0;
  PyObject *__pyx_v_minPolynomial = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isNull,&__pyx_n_s_minPolynomial,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isNull)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minPolynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_isNull = values[0];
    __pyx_v_minPolynomial = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyFieldFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *)__pyx_v_self), __pyx_v_isNull, __pyx_v_minPolynomial);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *__pyx_v_self, PyObject *__pyx_v_isNull, PyObject *__pyx_v_minPolynomial) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  uint64_t __pyx_t_2;
  math::FieldFn *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":78
 *     """
 *     def __cinit__(self,isNull,minPolynomial):
 *         if isNull:             # <<<<<<<<<<<<<<
 *             self.thisptr = <IField[uint64_t]*>NULL
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isNull); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":79
 *     def __cinit__(self,isNull,minPolynomial):
 *         if isNull:
 *             self.thisptr = <IField[uint64_t]*>NULL             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = <IField[uint64_t]*>(new FieldFn(minPolynomial))
 */
    __pyx_v_self->__pyx_base.thisptr = ((math::IField<uint64_t> *)NULL);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":81
 *             self.thisptr = <IField[uint64_t]*>NULL
 *         else:
 *             self.thisptr = <IField[uint64_t]*>(new FieldFn(minPolynomial))             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.thisptr != <IField[uint64_t]*>NULL:
 */
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_minPolynomial); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_t_3 = new math::FieldFn(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->__pyx_base.thisptr = ((math::IField<uint64_t> *)__pyx_t_3);
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":77
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,isNull,minPolynomial):             # <<<<<<<<<<<<<<
 *         if isNull:
 *             self.thisptr = <IField[uint64_t]*>NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyFieldFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":82
 *         else:
 *             self.thisptr = <IField[uint64_t]*>(new FieldFn(minPolynomial))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != <IField[uint64_t]*>NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_9PyFieldFn_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":83
 *             self.thisptr = <IField[uint64_t]*>(new FieldFn(minPolynomial))
 *     def __dealloc__(self):
 *         if self.thisptr != <IField[uint64_t]*>NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.thisptr != ((math::IField<uint64_t> *)NULL)) != 0);
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":84
 *     def __dealloc__(self):
 *         if self.thisptr != <IField[uint64_t]*>NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class PyMatrixFactory_uint64:
 */
    delete __pyx_v_self->__pyx_base.thisptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":82
 *         else:
 *             self.thisptr = <IField[uint64_t]*>(new FieldFn(minPolynomial))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != <IField[uint64_t]*>NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":90
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64___cinit__(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":97
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,isNull,minPolynomial):             # <<<<<<<<<<<<<<
 *         if isNull:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>NULL
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_isNull = 0;
  PyObject *__pyx_v_minPolynomial = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isNull,&__pyx_n_s_minPolynomial,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_isNull)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minPolynomial)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_isNull = values[0];
    __pyx_v_minPolynomial = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyMatrixFactory_Fn_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *)__pyx_v_self), __pyx_v_isNull, __pyx_v_minPolynomial);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *__pyx_v_self, PyObject *__pyx_v_isNull, PyObject *__pyx_v_minPolynomial) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  uint64_t __pyx_t_2;
  math::MatrixFactory_Fn *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":98
 *     """
 *     def __cinit__(self,isNull,minPolynomial):
 *         if isNull:             # <<<<<<<<<<<<<<
 *             self.thisptr = <IMatrixFactory[uint64_t]*>NULL
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_isNull); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":99
 *     def __cinit__(self,isNull,minPolynomial):
 *         if isNull:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>NULL             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>(new MatrixFactory_Fn(minPolynomial))
 */
    __pyx_v_self->__pyx_base.thisptr = ((math::IMatrixFactory<uint64_t> *)NULL);
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":101
 *             self.thisptr = <IMatrixFactory[uint64_t]*>NULL
 *         else:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>(new MatrixFactory_Fn(minPolynomial))             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.thisptr != <IMatrixFactory[uint64_t]*>NULL:
 */
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_minPolynomial); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    try {
      __pyx_t_3 = new math::MatrixFactory_Fn(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_self->__pyx_base.thisptr = ((math::IMatrixFactory<uint64_t> *)__pyx_t_3);
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":97
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,isNull,minPolynomial):             # <<<<<<<<<<<<<<
 *         if isNull:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>NULL
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyMatrixFactory_Fn_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":102
 *         else:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>(new MatrixFactory_Fn(minPolynomial))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != <IMatrixFactory[uint64_t]*>NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":103
 *             self.thisptr = <IMatrixFactory[uint64_t]*>(new MatrixFactory_Fn(minPolynomial))
 *     def __dealloc__(self):
 *         if self.thisptr != <IMatrixFactory[uint64_t]*>NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.thisptr != ((math::IMatrixFactory<uint64_t> *)NULL)) != 0);
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":104
 *     def __dealloc__(self):
 *         if self.thisptr != <IMatrixFactory[uint64_t]*>NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBBConfig:
 */
    delete __pyx_v_self->__pyx_base.thisptr;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":102
 *         else:
 *             self.thisptr = <IMatrixFactory[uint64_t]*>(new MatrixFactory_Fn(minPolynomial))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != <IMatrixFactory[uint64_t]*>NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":110
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,indet,OptLevel opt,PyField_uint64 field,PyMatrixFactory_uint64 mFac,PyPolynomialFactory_uint64 polFac,PyMonomialFactory monFac,use_pol_ex,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit):             # <<<<<<<<<<<<<<
 *         self.exclusions = <bool*>malloc(len(variable_exclusions)*cython.sizeof(bool))
 *         for i in xrange(len(variable_exclusions)):
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_indet = 0;
  enum borderbasis::OptLevel __pyx_v_opt;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_mFac = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFac = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFac = 0;
  PyObject *__pyx_v_use_pol_ex = 0;
  PyObject *__pyx_v_use_variable_exclusion = 0;
  PyObject *__pyx_v_variable_exclusions = 0;
  PyObject *__pyx_v_use_gf2_reductions = 0;
  PyObject *__pyx_v_min_mutants_limit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_indet,&__pyx_n_s_opt,&__pyx_n_s_field,&__pyx_n_s_mFac,&__pyx_n_s_polFac,&__pyx_n_s_monFac,&__pyx_n_s_use_pol_ex,&__pyx_n_s_use_variable_exclusion,&__pyx_n_s_variable_exclusions,&__pyx_n_s_use_gf2_reductions,&__pyx_n_s_min_mutants_limit,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indet)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mFac)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_polFac)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_monFac)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_pol_ex)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 6); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  7:
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_variable_exclusion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 7); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  8:
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable_exclusions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 8); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  9:
        if (likely((values[9] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_gf2_reductions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 9); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case 10:
        if (likely((values[10] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_mutants_limit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, 10); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_indet = values[0];
    __pyx_v_opt = ((enum borderbasis::OptLevel)PyInt_AsLong(values[1])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_field = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *)values[2]);
    __pyx_v_mFac = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *)values[3]);
    __pyx_v_polFac = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)values[4]);
    __pyx_v_monFac = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)values[5]);
    __pyx_v_use_pol_ex = values[6];
    __pyx_v_use_variable_exclusion = values[7];
    __pyx_v_variable_exclusions = values[8];
    __pyx_v_use_gf2_reductions = values[9];
    __pyx_v_min_mutants_limit = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBBConfig.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyField_uint64, 1, "field", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mFac), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64, 1, "mFac", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_polFac), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64, 1, "polFac", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_monFac), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMonomialFactory, 1, "monFac", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *)__pyx_v_self), __pyx_v_indet, __pyx_v_opt, __pyx_v_field, __pyx_v_mFac, __pyx_v_polFac, __pyx_v_monFac, __pyx_v_use_pol_ex, __pyx_v_use_variable_exclusion, __pyx_v_variable_exclusions, __pyx_v_use_gf2_reductions, __pyx_v_min_mutants_limit);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *__pyx_v_self, PyObject *__pyx_v_indet, enum borderbasis::OptLevel __pyx_v_opt, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_mFac, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFac, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFac, PyObject *__pyx_v_use_pol_ex, PyObject *__pyx_v_use_variable_exclusion, PyObject *__pyx_v_variable_exclusions, PyObject *__pyx_v_use_gf2_reductions, PyObject *__pyx_v_min_mutants_limit) {
  Py_ssize_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  bool __pyx_t_4;
  unsigned int __pyx_t_5;
  bool __pyx_t_6;
  bool __pyx_t_7;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":111
 *     """
 *     def __cinit__(self,indet,OptLevel opt,PyField_uint64 field,PyMatrixFactory_uint64 mFac,PyPolynomialFactory_uint64 polFac,PyMonomialFactory monFac,use_pol_ex,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit):
 *         self.exclusions = <bool*>malloc(len(variable_exclusions)*cython.sizeof(bool))             # <<<<<<<<<<<<<<
 *         for i in xrange(len(variable_exclusions)):
 *             self.exclusions[i] = variable_exclusions[i]
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_variable_exclusions); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->exclusions = ((bool *)malloc((__pyx_t_1 * (sizeof(bool)))));

  /* "sage/borderbasis/cppWrapper.pyx":112
 *     def __cinit__(self,indet,OptLevel opt,PyField_uint64 field,PyMatrixFactory_uint64 mFac,PyPolynomialFactory_uint64 polFac,PyMonomialFactory monFac,use_pol_ex,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit):
 *         self.exclusions = <bool*>malloc(len(variable_exclusions)*cython.sizeof(bool))
 *         for i in xrange(len(variable_exclusions)):             # <<<<<<<<<<<<<<
 *             self.exclusions[i] = variable_exclusions[i]
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_variable_exclusions); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "sage/borderbasis/cppWrapper.pyx":113
 *         self.exclusions = <bool*>malloc(len(variable_exclusions)*cython.sizeof(bool))
 *         for i in xrange(len(variable_exclusions)):
 *             self.exclusions[i] = variable_exclusions[i]             # <<<<<<<<<<<<<<
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))
 *     def __dealloc__(self):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_variable_exclusions, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_self->exclusions[__pyx_v_i]) = __pyx_t_4;
  }

  /* "sage/borderbasis/cppWrapper.pyx":114
 *         for i in xrange(len(variable_exclusions)):
 *             self.exclusions[i] = variable_exclusions[i]
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_indet); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_use_pol_ex); if (unlikely((__pyx_t_4 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_use_variable_exclusion); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_use_gf2_reductions); if (unlikely((__pyx_t_7 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_8 = __Pyx_PyInt_As_unsigned_int(__pyx_v_min_mutants_limit); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->thisptr = ((borderbasis::BBConfig *)new borderbasis::BBConfig(__pyx_t_5, __pyx_v_opt, __pyx_v_field->thisptr, __pyx_v_mFac->thisptr, __pyx_v_polFac->thisptr, __pyx_v_monFac->thisptr, __pyx_t_4, __pyx_t_6, __pyx_v_self->exclusions, __pyx_t_7, __pyx_t_8));

  /* "sage/borderbasis/cppWrapper.pyx":110
 *     Parameter class, used to send C++ classes to python methods
 *     """
 *     def __cinit__(self,indet,OptLevel opt,PyField_uint64 field,PyMatrixFactory_uint64 mFac,PyPolynomialFactory_uint64 polFac,PyMonomialFactory monFac,use_pol_ex,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit):             # <<<<<<<<<<<<<<
 *         self.exclusions = <bool*>malloc(len(variable_exclusions)*cython.sizeof(bool))
 *         for i in xrange(len(variable_exclusions)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBBConfig.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":115
 *             self.exclusions[i] = variable_exclusions[i]
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         free(self.exclusions)
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_10PyBBConfig_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":116
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *         free(self.exclusions)
 * 
 */
  delete __pyx_v_self->thisptr;

  /* "sage/borderbasis/cppWrapper.pyx":117
 *     def __dealloc__(self):
 *         del self.thisptr
 *         free(self.exclusions)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyBorderBasisTools_uint64:
 */
  free(__pyx_v_self->exclusions);

  /* "sage/borderbasis/cppWrapper.pyx":115
 *             self.exclusions[i] = variable_exclusions[i]
 *         self.thisptr = <BBConfig*>(new BBConfig(indet,opt,field.thisptr,mFac.thisptr,polFac.thisptr,monFac.thisptr,use_pol_ex,use_variable_exclusion,self.exclusions,use_gf2_reductions,min_mutants_limit))
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *         free(self.exclusions)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":146
 * 
 *     """
 *     def __cinit__(self,PyField_uint64 field,PyMatrixFactory_uint64 matrixFactory,PyPolynomialFactory_uint64 polFactory,PyMonomialFactory monFactory,indeterminates,optimizations,use_pol_exclusion=False,use_variable_exclusion=False,variable_exclusions=[False,],use_gf2_reductions=True,min_mutants_limit=0):             # <<<<<<<<<<<<<<
 *         self.field = field
 *         self.matrixFactory = matrixFactory
 */

/* Python wrapper */
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_matrixFactory = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFactory = 0;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFactory = 0;
  PyObject *__pyx_v_indeterminates = 0;
  PyObject *__pyx_v_optimizations = 0;
  PyObject *__pyx_v_use_pol_exclusion = 0;
  PyObject *__pyx_v_use_variable_exclusion = 0;
  PyObject *__pyx_v_variable_exclusions = 0;
  PyObject *__pyx_v_use_gf2_reductions = 0;
  PyObject *__pyx_v_min_mutants_limit = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field,&__pyx_n_s_matrixFactory,&__pyx_n_s_polFactory,&__pyx_n_s_monFactory,&__pyx_n_s_indeterminates,&__pyx_n_s_optimizations,&__pyx_n_s_use_pol_exclusion,&__pyx_n_s_use_variable_exclusion,&__pyx_n_s_variable_exclusions,&__pyx_n_s_use_gf2_reductions,&__pyx_n_s_min_mutants_limit,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)Py_False);
    values[8] = __pyx_k_;
    values[9] = ((PyObject *)Py_True);
    values[10] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_matrixFactory)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_polFactory)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_monFactory)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_indeterminates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_optimizations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, 5); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_pol_exclusion);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_variable_exclusion);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable_exclusions);
          if (value) { values[8] = value; kw_args--; }
        }
        case  9:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_use_gf2_reductions);
          if (value) { values[9] = value; kw_args--; }
        }
        case 10:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_min_mutants_limit);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_field = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *)values[0]);
    __pyx_v_matrixFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *)values[1]);
    __pyx_v_polFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)values[2]);
    __pyx_v_monFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)values[3]);
    __pyx_v_indeterminates = values[4];
    __pyx_v_optimizations = values[5];
    __pyx_v_use_pol_exclusion = values[6];
    __pyx_v_use_variable_exclusion = values[7];
    __pyx_v_variable_exclusions = values[8];
    __pyx_v_use_gf2_reductions = values[9];
    __pyx_v_min_mutants_limit = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 6, 11, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyField_uint64, 1, "field", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_matrixFactory), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64, 1, "matrixFactory", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_polFactory), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64, 1, "polFactory", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_monFactory), __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMonomialFactory, 1, "monFactory", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64___cinit__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self), __pyx_v_field, __pyx_v_matrixFactory, __pyx_v_polFactory, __pyx_v_monFactory, __pyx_v_indeterminates, __pyx_v_optimizations, __pyx_v_use_pol_exclusion, __pyx_v_use_variable_exclusion, __pyx_v_variable_exclusions, __pyx_v_use_gf2_reductions, __pyx_v_min_mutants_limit);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64___cinit__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *__pyx_v_field, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *__pyx_v_matrixFactory, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *__pyx_v_polFactory, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *__pyx_v_monFactory, PyObject *__pyx_v_indeterminates, PyObject *__pyx_v_optimizations, PyObject *__pyx_v_use_pol_exclusion, PyObject *__pyx_v_use_variable_exclusion, PyObject *__pyx_v_variable_exclusions, PyObject *__pyx_v_use_gf2_reductions, PyObject *__pyx_v_min_mutants_limit) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  borderbasis::BorderBasisTools<uint64_t> *__pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":147
 *     """
 *     def __cinit__(self,PyField_uint64 field,PyMatrixFactory_uint64 matrixFactory,PyPolynomialFactory_uint64 polFactory,PyMonomialFactory monFactory,indeterminates,optimizations,use_pol_exclusion=False,use_variable_exclusion=False,variable_exclusions=[False,],use_gf2_reductions=True,min_mutants_limit=0):
 *         self.field = field             # <<<<<<<<<<<<<<
 *         self.matrixFactory = matrixFactory
 *         self.polFactory = polFactory
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_field));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
  __Pyx_GOTREF(__pyx_v_self->field);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->field));
  __pyx_v_self->field = __pyx_v_field;

  /* "sage/borderbasis/cppWrapper.pyx":148
 *     def __cinit__(self,PyField_uint64 field,PyMatrixFactory_uint64 matrixFactory,PyPolynomialFactory_uint64 polFactory,PyMonomialFactory monFactory,indeterminates,optimizations,use_pol_exclusion=False,use_variable_exclusion=False,variable_exclusions=[False,],use_gf2_reductions=True,min_mutants_limit=0):
 *         self.field = field
 *         self.matrixFactory = matrixFactory             # <<<<<<<<<<<<<<
 *         self.polFactory = polFactory
 *         self.monFactory = monFactory
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_matrixFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_matrixFactory));
  __Pyx_GOTREF(__pyx_v_self->matrixFactory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->matrixFactory));
  __pyx_v_self->matrixFactory = __pyx_v_matrixFactory;

  /* "sage/borderbasis/cppWrapper.pyx":149
 *         self.field = field
 *         self.matrixFactory = matrixFactory
 *         self.polFactory = polFactory             # <<<<<<<<<<<<<<
 *         self.monFactory = monFactory
 *         self.indet = indeterminates
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_polFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_polFactory));
  __Pyx_GOTREF(__pyx_v_self->polFactory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->polFactory));
  __pyx_v_self->polFactory = __pyx_v_polFactory;

  /* "sage/borderbasis/cppWrapper.pyx":150
 *         self.matrixFactory = matrixFactory
 *         self.polFactory = polFactory
 *         self.monFactory = monFactory             # <<<<<<<<<<<<<<
 *         self.indet = indeterminates
 *         if(optimizations == "none"):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_monFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_monFactory));
  __Pyx_GOTREF(__pyx_v_self->monFactory);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->monFactory));
  __pyx_v_self->monFactory = __pyx_v_monFactory;

  /* "sage/borderbasis/cppWrapper.pyx":151
 *         self.polFactory = polFactory
 *         self.monFactory = monFactory
 *         self.indet = indeterminates             # <<<<<<<<<<<<<<
 *         if(optimizations == "none"):
 *             self.optimizations = NONE
 */
  __Pyx_INCREF(__pyx_v_indeterminates);
  __Pyx_GIVEREF(__pyx_v_indeterminates);
  __Pyx_GOTREF(__pyx_v_self->indet);
  __Pyx_DECREF(__pyx_v_self->indet);
  __pyx_v_self->indet = __pyx_v_indeterminates;

  /* "sage/borderbasis/cppWrapper.pyx":152
 *         self.monFactory = monFactory
 *         self.indet = indeterminates
 *         if(optimizations == "none"):             # <<<<<<<<<<<<<<
 *             self.optimizations = NONE
 *         elif(optimizations == "enhanced"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_none, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":153
 *         self.indet = indeterminates
 *         if(optimizations == "none"):
 *             self.optimizations = NONE             # <<<<<<<<<<<<<<
 *         elif(optimizations == "enhanced"):
 *             self.optimizations = ENHANCED
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::NONE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":154
 *         if(optimizations == "none"):
 *             self.optimizations = NONE
 *         elif(optimizations == "enhanced"):             # <<<<<<<<<<<<<<
 *             self.optimizations = ENHANCED
 *         elif(optimizations == "optimistic"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_enhanced, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":155
 *             self.optimizations = NONE
 *         elif(optimizations == "enhanced"):
 *             self.optimizations = ENHANCED             # <<<<<<<<<<<<<<
 *         elif(optimizations == "optimistic"):
 *             self.optimizations = OPTIMISTIC
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::ENHANCED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":156
 *         elif(optimizations == "enhanced"):
 *             self.optimizations = ENHANCED
 *         elif(optimizations == "optimistic"):             # <<<<<<<<<<<<<<
 *             self.optimizations = OPTIMISTIC
 *         elif(optimizations == "experimental"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_optimistic, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":157
 *             self.optimizations = ENHANCED
 *         elif(optimizations == "optimistic"):
 *             self.optimizations = OPTIMISTIC             # <<<<<<<<<<<<<<
 *         elif(optimizations == "experimental"):
 *             self.optimizations = EXPERIMENTAL
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::OPTIMISTIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":158
 *         elif(optimizations == "optimistic"):
 *             self.optimizations = OPTIMISTIC
 *         elif(optimizations == "experimental"):             # <<<<<<<<<<<<<<
 *             self.optimizations = EXPERIMENTAL
 *         elif(optimizations == "mutant"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_experimental, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":159
 *             self.optimizations = OPTIMISTIC
 *         elif(optimizations == "experimental"):
 *             self.optimizations = EXPERIMENTAL             # <<<<<<<<<<<<<<
 *         elif(optimizations == "mutant"):
 *             self.optimizations = MUTANT
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::EXPERIMENTAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":160
 *         elif(optimizations == "experimental"):
 *             self.optimizations = EXPERIMENTAL
 *         elif(optimizations == "mutant"):             # <<<<<<<<<<<<<<
 *             self.optimizations = MUTANT
 *         elif(optimizations == "improved_mutant"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_mutant, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":161
 *             self.optimizations = EXPERIMENTAL
 *         elif(optimizations == "mutant"):
 *             self.optimizations = MUTANT             # <<<<<<<<<<<<<<
 *         elif(optimizations == "improved_mutant"):
 *             self.optimizations = IMPROVED_MUTANT
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::MUTANT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":162
 *         elif(optimizations == "mutant"):
 *             self.optimizations = MUTANT
 *         elif(optimizations == "improved_mutant"):             # <<<<<<<<<<<<<<
 *             self.optimizations = IMPROVED_MUTANT
 *         elif(optimizations == "improved_mutant_linear"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_improved_mutant, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":163
 *             self.optimizations = MUTANT
 *         elif(optimizations == "improved_mutant"):
 *             self.optimizations = IMPROVED_MUTANT             # <<<<<<<<<<<<<<
 *         elif(optimizations == "improved_mutant_linear"):
 *             self.optimizations = IMPROVED_MUTANT_LINEAR
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::IMPROVED_MUTANT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":164
 *         elif(optimizations == "improved_mutant"):
 *             self.optimizations = IMPROVED_MUTANT
 *         elif(optimizations == "improved_mutant_linear"):             # <<<<<<<<<<<<<<
 *             self.optimizations = IMPROVED_MUTANT_LINEAR
 *         elif(optimizations == "improved_mutant_optimistic"):
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_improved_mutant_linear, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":165
 *             self.optimizations = IMPROVED_MUTANT
 *         elif(optimizations == "improved_mutant_linear"):
 *             self.optimizations = IMPROVED_MUTANT_LINEAR             # <<<<<<<<<<<<<<
 *         elif(optimizations == "improved_mutant_optimistic"):
 *             self.optimizations = IMPROVED_MUTANT_OPTIMISTIC
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::IMPROVED_MUTANT_LINEAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }

  /* "sage/borderbasis/cppWrapper.pyx":166
 *         elif(optimizations == "improved_mutant_linear"):
 *             self.optimizations = IMPROVED_MUTANT_LINEAR
 *         elif(optimizations == "improved_mutant_optimistic"):             # <<<<<<<<<<<<<<
 *             self.optimizations = IMPROVED_MUTANT_OPTIMISTIC
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_optimizations, __pyx_n_s_improved_mutant_optimistic, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "sage/borderbasis/cppWrapper.pyx":167
 *             self.optimizations = IMPROVED_MUTANT_LINEAR
 *         elif(optimizations == "improved_mutant_optimistic"):
 *             self.optimizations = IMPROVED_MUTANT_OPTIMISTIC             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("optimization value \""+optimizations+"\" unknown")
 */
    __pyx_t_2 = PyInt_FromLong(borderbasis::IMPROVED_MUTANT_OPTIMISTIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->optimizations);
    __Pyx_DECREF(__pyx_v_self->optimizations);
    __pyx_v_self->optimizations = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":169
 *             self.optimizations = IMPROVED_MUTANT_OPTIMISTIC
 *         else:
 *             raise ValueError("optimization value \""+optimizations+"\" unknown")             # <<<<<<<<<<<<<<
 * 
 *         self.cfg = PyBBConfig(indeterminates,self.optimizations,field,matrixFactory,polFactory,monFactory,use_pol_exclusion,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit)
 */
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_optimization_value, __pyx_v_optimizations); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_unknown); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "sage/borderbasis/cppWrapper.pyx":171
 *             raise ValueError("optimization value \""+optimizations+"\" unknown")
 * 
 *         self.cfg = PyBBConfig(indeterminates,self.optimizations,field,matrixFactory,polFactory,monFactory,use_pol_exclusion,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr = new BorderBasisTools[uint64_t](self.cfg.thisptr)
 */
  __pyx_t_3 = PyTuple_New(11); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_indeterminates);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_indeterminates);
  __Pyx_GIVEREF(__pyx_v_indeterminates);
  __Pyx_INCREF(__pyx_v_self->optimizations);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->optimizations);
  __Pyx_GIVEREF(__pyx_v_self->optimizations);
  __Pyx_INCREF(((PyObject *)__pyx_v_field));
  PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_field));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_field));
  __Pyx_INCREF(((PyObject *)__pyx_v_matrixFactory));
  PyTuple_SET_ITEM(__pyx_t_3, 3, ((PyObject *)__pyx_v_matrixFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_matrixFactory));
  __Pyx_INCREF(((PyObject *)__pyx_v_polFactory));
  PyTuple_SET_ITEM(__pyx_t_3, 4, ((PyObject *)__pyx_v_polFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_polFactory));
  __Pyx_INCREF(((PyObject *)__pyx_v_monFactory));
  PyTuple_SET_ITEM(__pyx_t_3, 5, ((PyObject *)__pyx_v_monFactory));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_monFactory));
  __Pyx_INCREF(__pyx_v_use_pol_exclusion);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_use_pol_exclusion);
  __Pyx_GIVEREF(__pyx_v_use_pol_exclusion);
  __Pyx_INCREF(__pyx_v_use_variable_exclusion);
  PyTuple_SET_ITEM(__pyx_t_3, 7, __pyx_v_use_variable_exclusion);
  __Pyx_GIVEREF(__pyx_v_use_variable_exclusion);
  __Pyx_INCREF(__pyx_v_variable_exclusions);
  PyTuple_SET_ITEM(__pyx_t_3, 8, __pyx_v_variable_exclusions);
  __Pyx_GIVEREF(__pyx_v_variable_exclusions);
  __Pyx_INCREF(__pyx_v_use_gf2_reductions);
  PyTuple_SET_ITEM(__pyx_t_3, 9, __pyx_v_use_gf2_reductions);
  __Pyx_GIVEREF(__pyx_v_use_gf2_reductions);
  __Pyx_INCREF(__pyx_v_min_mutants_limit);
  PyTuple_SET_ITEM(__pyx_t_3, 10, __pyx_v_min_mutants_limit);
  __Pyx_GIVEREF(__pyx_v_min_mutants_limit);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyBBConfig)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->cfg);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->cfg));
  __pyx_v_self->cfg = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":173
 *         self.cfg = PyBBConfig(indeterminates,self.optimizations,field,matrixFactory,polFactory,monFactory,use_pol_exclusion,use_variable_exclusion,variable_exclusions,use_gf2_reductions,min_mutants_limit)
 * 
 *         self.thisptr = new BorderBasisTools[uint64_t](self.cfg.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_4 = new borderbasis::BorderBasisTools<uint64_t>(__pyx_v_self->cfg->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->thisptr = __pyx_t_4;

  /* "sage/borderbasis/cppWrapper.pyx":146
 * 
 *     """
 *     def __cinit__(self,PyField_uint64 field,PyMatrixFactory_uint64 matrixFactory,PyPolynomialFactory_uint64 polFactory,PyMonomialFactory monFactory,indeterminates,optimizations,use_pol_exclusion=False,use_variable_exclusion=False,variable_exclusions=[False,],use_gf2_reductions=True,min_mutants_limit=0):             # <<<<<<<<<<<<<<
 *         self.field = field
 *         self.matrixFactory = matrixFactory
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":175
 *         self.thisptr = new BorderBasisTools[uint64_t](self.cfg.thisptr)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_2__dealloc__(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_2__dealloc__(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "sage/borderbasis/cppWrapper.pyx":176
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_statistics(self):
 */
  delete __pyx_v_self->thisptr;

  /* "sage/borderbasis/cppWrapper.pyx":175
 *         self.thisptr = new BorderBasisTools[uint64_t](self.cfg.thisptr)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "sage/borderbasis/cppWrapper.pyx":178
 *         del self.thisptr
 * 
 *     cpdef get_statistics(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the statistics collected during the last run of ``calculate_basis``
 */

static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_5get_statistics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_get_statistics(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, int __pyx_skip_dispatch) {
  borderbasis::Statistics *__pyx_v_stats;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  borderbasis::Statistics *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_statistics", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_statistics); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_5get_statistics)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "sage/borderbasis/cppWrapper.pyx":203
 *             {'maxComparisons': 17623L}
 *         """
 *         cdef Statistics* stats = new Statistics()             # <<<<<<<<<<<<<<
 *         self.thisptr.getStatistics(stats)
 *         return {'maxComparisons': stats.max_comparisons_in_reduction,'maxMatrix': {"rows": stats.maxMatrix.rows, "columns": stats.maxMatrix.columns}}
 */
  try {
    __pyx_t_3 = new borderbasis::Statistics();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_stats = __pyx_t_3;

  /* "sage/borderbasis/cppWrapper.pyx":204
 *         """
 *         cdef Statistics* stats = new Statistics()
 *         self.thisptr.getStatistics(stats)             # <<<<<<<<<<<<<<
 *         return {'maxComparisons': stats.max_comparisons_in_reduction,'maxMatrix': {"rows": stats.maxMatrix.rows, "columns": stats.maxMatrix.columns}}
 * 
 */
  __pyx_v_self->thisptr->getStatistics(__pyx_v_stats);

  /* "sage/borderbasis/cppWrapper.pyx":205
 *         cdef Statistics* stats = new Statistics()
 *         self.thisptr.getStatistics(stats)
 *         return {'maxComparisons': stats.max_comparisons_in_reduction,'maxMatrix': {"rows": stats.maxMatrix.rows, "columns": stats.maxMatrix.columns}}             # <<<<<<<<<<<<<<
 * 
 *     cpdef calculate_basis(self,generators):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint64_t(__pyx_v_stats->max_comparisons_in_reduction); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_maxComparisons, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_stats->maxMatrix.rows); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rows, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_stats->maxMatrix.columns); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_columns, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_maxMatrix, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":178
 *         del self.thisptr
 * 
 *     cpdef get_statistics(self):             # <<<<<<<<<<<<<<
 *         r"""
 *         Returns the statistics collected during the last run of ``calculate_basis``
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.get_statistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_5get_statistics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_4get_statistics[] = "File: sage/borderbasis/cppWrapper.pyx (starting at line 178)\n\n        Returns the statistics collected during the last run of ``calculate_basis``\n\n        OUTPUT::\n\n            A map with the following structure:\n            {'maxComparisons': <int>}\n            ``maxComparisons`` describes the biggest amount of comparisons between terms the algorithm had to handle during one reduction step\n        \n        EXAMPLES::\n            sage: from sage.borderbasis.cppWrapper import *\n            sage: sr = mq.SR(2,1,1,4,gf2=True,polybori=False)\n            sage: F,s = sr.polynomial_system()\n\n            sage: field = PyFieldFn(2)\n            sage: polynomialFactory = PyPolynomialFactory_uint64()\n            sage: monFactory = PyMonomialFactory()\n\n            sage: bbt = PyBorderBasisTools_uint64(field,polynomialFactory,monFactory,F.nvariables(),'enhanced')\n            sage: Basis,orderIdeal = bbt.calculate_basis(F)\n\n            sage: bbt.get_statistics()\n            {'maxComparisons': 17623L}\n        ";
static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_5get_statistics(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_statistics (wrapper)", 0);
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_4get_statistics(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_4get_statistics(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_statistics", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->get_statistics(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.get_statistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":207
 *         return {'maxComparisons': stats.max_comparisons_in_reduction,'maxMatrix': {"rows": stats.maxMatrix.rows, "columns": stats.maxMatrix.columns}}
 * 
 *     cpdef calculate_basis(self,generators):             # <<<<<<<<<<<<<<
 *         r"""
 *         Calculates a border basis from the given generator polynomials
 */

static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_7calculate_basis(PyObject *__pyx_v_self, PyObject *__pyx_v_generators); /*proto*/
static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_calculate_basis(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_generators, int __pyx_skip_dispatch) {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_nativeInWrapper = NULL;
  base::IOwningList<polynomial::IPolynomial_uint64 *> *__pyx_v_nativeIn;
  base::IOwningList<polynomial::IPolynomial_uint64 *> *__pyx_v_nativeOut;
  polynomial::IPolynomial<uint64_t> *__pyx_v_nativeOrderIdeal;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_nativeOutWrapper = NULL;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *__pyx_v_nativeOrderIdealWrapper = NULL;
  PyObject *__pyx_v_polynomials = NULL;
  PyObject *__pyx_v_orderIdeal = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  base::IOwningList<polynomial::IPolynomial_uint64 *> *__pyx_t_4;
  base::OwningVector<polynomial::IPolynomial_uint64 *> *__pyx_t_5;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_basis", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_calculate_basis); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_7calculate_basis)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_generators);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_generators);
      __Pyx_GIVEREF(__pyx_v_generators);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "sage/borderbasis/cppWrapper.pyx":222
 *             2. A polynomial, the according order ideal
 *         """
 *         nativeInWrapper = self._to_native_pol_list(generators)             # <<<<<<<<<<<<<<
 *         cdef IOwningList[IPolynomial_uint64*]* nativeIn = (<PyIOwningList_pol>(nativeInWrapper)).thisptr
 *         cdef IOwningList[IPolynomial_uint64*]* nativeOut = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_to_native_pol_list(__pyx_v_self, __pyx_v_generators)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nativeInWrapper = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":223
 *         """
 *         nativeInWrapper = self._to_native_pol_list(generators)
 *         cdef IOwningList[IPolynomial_uint64*]* nativeIn = (<PyIOwningList_pol>(nativeInWrapper)).thisptr             # <<<<<<<<<<<<<<
 *         cdef IOwningList[IPolynomial_uint64*]* nativeOut = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())
 *         cdef IPolynomial[uint64_t]* nativeOrderIdeal = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 */
  __pyx_t_4 = __pyx_v_nativeInWrapper->thisptr;
  __pyx_v_nativeIn = __pyx_t_4;

  /* "sage/borderbasis/cppWrapper.pyx":224
 *         nativeInWrapper = self._to_native_pol_list(generators)
 *         cdef IOwningList[IPolynomial_uint64*]* nativeIn = (<PyIOwningList_pol>(nativeInWrapper)).thisptr
 *         cdef IOwningList[IPolynomial_uint64*]* nativeOut = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())             # <<<<<<<<<<<<<<
 *         cdef IPolynomial[uint64_t]* nativeOrderIdeal = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 * 
 */
  try {
    __pyx_t_5 = new base::OwningVector<polynomial::IPolynomial_uint64 *>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_nativeOut = ((base::IOwningList<polynomial::IPolynomial_uint64 *> *)__pyx_t_5);

  /* "sage/borderbasis/cppWrapper.pyx":225
 *         cdef IOwningList[IPolynomial_uint64*]* nativeIn = (<PyIOwningList_pol>(nativeInWrapper)).thisptr
 *         cdef IOwningList[IPolynomial_uint64*]* nativeOut = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())
 *         cdef IPolynomial[uint64_t]* nativeOrderIdeal = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.calculateBasis(<void*>(nativeIn),<void*>(nativeOut),<void*>(nativeOrderIdeal))
 */
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_int(__pyx_v_self->indet); if (unlikely((__pyx_t_6 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_nativeOrderIdeal = __pyx_v_self->polFactory->thisptr->create(__pyx_t_6);

  /* "sage/borderbasis/cppWrapper.pyx":227
 *         cdef IPolynomial[uint64_t]* nativeOrderIdeal = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 * 
 *         self.thisptr.calculateBasis(<void*>(nativeIn),<void*>(nativeOut),<void*>(nativeOrderIdeal))             # <<<<<<<<<<<<<<
 * 
 *         nativeOutWrapper = PyIOwningList_pol()
 */
  __pyx_v_self->thisptr->calculateBasis(((void *)__pyx_v_nativeIn), ((void *)__pyx_v_nativeOut), ((void *)__pyx_v_nativeOrderIdeal));

  /* "sage/borderbasis/cppWrapper.pyx":229
 *         self.thisptr.calculateBasis(<void*>(nativeIn),<void*>(nativeOut),<void*>(nativeOrderIdeal))
 * 
 *         nativeOutWrapper = PyIOwningList_pol()             # <<<<<<<<<<<<<<
 *         nativeOrderIdealWrapper = PyIPolynomial_uint64()
 *         nativeOutWrapper.thisptr = nativeOut
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nativeOutWrapper = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":230
 * 
 *         nativeOutWrapper = PyIOwningList_pol()
 *         nativeOrderIdealWrapper = PyIPolynomial_uint64()             # <<<<<<<<<<<<<<
 *         nativeOutWrapper.thisptr = nativeOut
 *         nativeOrderIdealWrapper.thisptr = nativeOrderIdeal
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nativeOrderIdealWrapper = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":231
 *         nativeOutWrapper = PyIOwningList_pol()
 *         nativeOrderIdealWrapper = PyIPolynomial_uint64()
 *         nativeOutWrapper.thisptr = nativeOut             # <<<<<<<<<<<<<<
 *         nativeOrderIdealWrapper.thisptr = nativeOrderIdeal
 * 
 */
  __pyx_v_nativeOutWrapper->thisptr = __pyx_v_nativeOut;

  /* "sage/borderbasis/cppWrapper.pyx":232
 *         nativeOrderIdealWrapper = PyIPolynomial_uint64()
 *         nativeOutWrapper.thisptr = nativeOut
 *         nativeOrderIdealWrapper.thisptr = nativeOrderIdeal             # <<<<<<<<<<<<<<
 * 
 *         polynomials = self._from_native_pol_list(nativeOutWrapper,generators.ring(),self._get_variables(generators))
 */
  __pyx_v_nativeOrderIdealWrapper->thisptr = __pyx_v_nativeOrderIdeal;

  /* "sage/borderbasis/cppWrapper.pyx":234
 *         nativeOrderIdealWrapper.thisptr = nativeOrderIdeal
 * 
 *         polynomials = self._from_native_pol_list(nativeOutWrapper,generators.ring(),self._get_variables(generators))             # <<<<<<<<<<<<<<
 *         orderIdeal = self._from_native_pol(nativeOrderIdealWrapper,generators.ring(),self._get_variables(generators))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_generators, __pyx_n_s_ring); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_get_variables(__pyx_v_self, __pyx_v_generators); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_from_native_pol_list(__pyx_v_self, __pyx_v_nativeOutWrapper, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_polynomials = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":235
 * 
 *         polynomials = self._from_native_pol_list(nativeOutWrapper,generators.ring(),self._get_variables(generators))
 *         orderIdeal = self._from_native_pol(nativeOrderIdealWrapper,generators.ring(),self._get_variables(generators))             # <<<<<<<<<<<<<<
 * 
 *         del nativeIn
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_generators, __pyx_n_s_ring); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_get_variables(__pyx_v_self, __pyx_v_generators); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_from_native_pol(__pyx_v_self, __pyx_v_nativeOrderIdealWrapper, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_orderIdeal = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":237
 *         orderIdeal = self._from_native_pol(nativeOrderIdealWrapper,generators.ring(),self._get_variables(generators))
 * 
 *         del nativeIn             # <<<<<<<<<<<<<<
 *         del nativeOut
 *         del nativeOrderIdeal
 */
  delete __pyx_v_nativeIn;

  /* "sage/borderbasis/cppWrapper.pyx":238
 * 
 *         del nativeIn
 *         del nativeOut             # <<<<<<<<<<<<<<
 *         del nativeOrderIdeal
 * 
 */
  delete __pyx_v_nativeOut;

  /* "sage/borderbasis/cppWrapper.pyx":239
 *         del nativeIn
 *         del nativeOut
 *         del nativeOrderIdeal             # <<<<<<<<<<<<<<
 * 
 *         return (polynomials, orderIdeal)
 */
  delete __pyx_v_nativeOrderIdeal;

  /* "sage/borderbasis/cppWrapper.pyx":241
 *         del nativeOrderIdeal
 * 
 *         return (polynomials, orderIdeal)             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_variables(self,pythonList):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_polynomials);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_polynomials);
  __Pyx_GIVEREF(__pyx_v_polynomials);
  __Pyx_INCREF(__pyx_v_orderIdeal);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_orderIdeal);
  __Pyx_GIVEREF(__pyx_v_orderIdeal);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":207
 *         return {'maxComparisons': stats.max_comparisons_in_reduction,'maxMatrix': {"rows": stats.maxMatrix.rows, "columns": stats.maxMatrix.columns}}
 * 
 *     cpdef calculate_basis(self,generators):             # <<<<<<<<<<<<<<
 *         r"""
 *         Calculates a border basis from the given generator polynomials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.calculate_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nativeInWrapper);
  __Pyx_XDECREF((PyObject *)__pyx_v_nativeOutWrapper);
  __Pyx_XDECREF((PyObject *)__pyx_v_nativeOrderIdealWrapper);
  __Pyx_XDECREF(__pyx_v_polynomials);
  __Pyx_XDECREF(__pyx_v_orderIdeal);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_7calculate_basis(PyObject *__pyx_v_self, PyObject *__pyx_v_generators); /*proto*/
static char __pyx_doc_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_6calculate_basis[] = "File: sage/borderbasis/cppWrapper.pyx (starting at line 207)\n\n        Calculates a border basis from the given generator polynomials\n\n        INPUT::\n\n            - ``generators`` -- A PolynomialSequence of generator polynomials\n\n        OUTPUT::\n\n            A 2-touple consisting of objects in this order:\n\n            1. A list of polynomials, the calculated border basis\n            2. A polynomial, the according order ideal\n        ";
static PyObject *__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_7calculate_basis(PyObject *__pyx_v_self, PyObject *__pyx_v_generators) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_basis (wrapper)", 0);
  __pyx_r = __pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_6calculate_basis(((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self), ((PyObject *)__pyx_v_generators));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_6calculate_basis(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_generators) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_basis", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->calculate_basis(__pyx_v_self, __pyx_v_generators, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64.calculate_basis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":243
 *         return (polynomials, orderIdeal)
 * 
 *     cdef _get_variables(self,pythonList):             # <<<<<<<<<<<<<<
 *         existing = pythonList.variables()
 *         ordered = pythonList.ring().gens()
 */

static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__get_variables(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_pythonList) {
  PyObject *__pyx_v_existing = NULL;
  PyObject *__pyx_v_ordered = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_variables", 0);

  /* "sage/borderbasis/cppWrapper.pyx":244
 * 
 *     cdef _get_variables(self,pythonList):
 *         existing = pythonList.variables()             # <<<<<<<<<<<<<<
 *         ordered = pythonList.ring().gens()
 *         result = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_pythonList, __pyx_n_s_variables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_existing = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":245
 *     cdef _get_variables(self,pythonList):
 *         existing = pythonList.variables()
 *         ordered = pythonList.ring().gens()             # <<<<<<<<<<<<<<
 *         result = []
 *         for i in ordered:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_pythonList, __pyx_n_s_ring); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_gens); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ordered = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":246
 *         existing = pythonList.variables()
 *         ordered = pythonList.ring().gens()
 *         result = []             # <<<<<<<<<<<<<<
 *         for i in ordered:
 *             for e in existing:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":247
 *         ordered = pythonList.ring().gens()
 *         result = []
 *         for i in ordered:             # <<<<<<<<<<<<<<
 *             for e in existing:
 *                 if ("%s" % (i)) == ("%s" % (e)):
 */
  if (PyList_CheckExact(__pyx_v_ordered) || PyTuple_CheckExact(__pyx_v_ordered)) {
    __pyx_t_1 = __pyx_v_ordered; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_ordered); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":248
 *         result = []
 *         for i in ordered:
 *             for e in existing:             # <<<<<<<<<<<<<<
 *                 if ("%s" % (i)) == ("%s" % (e)):
 *                     result.append(i)
 */
    if (PyList_CheckExact(__pyx_v_existing) || PyTuple_CheckExact(__pyx_v_existing)) {
      __pyx_t_2 = __pyx_v_existing; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_existing); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_2);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_e, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":249
 *         for i in ordered:
 *             for e in existing:
 *                 if ("%s" % (i)) == ("%s" % (e)):             # <<<<<<<<<<<<<<
 *                     result.append(i)
 *                     break
 */
      __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_s, __pyx_v_i); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_s, __pyx_v_e); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_t_7, __pyx_t_8, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = (__pyx_t_9 != 0);
      if (__pyx_t_10) {

        /* "sage/borderbasis/cppWrapper.pyx":250
 *             for e in existing:
 *                 if ("%s" % (i)) == ("%s" % (e)):
 *                     result.append(i)             # <<<<<<<<<<<<<<
 *                     break
 *         return result
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_i); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

        /* "sage/borderbasis/cppWrapper.pyx":251
 *                 if ("%s" % (i)) == ("%s" % (e)):
 *                     result.append(i)
 *                     break             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
        goto __pyx_L6_break;
      }
    }
    __pyx_L6_break:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":252
 *                     result.append(i)
 *                     break
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef PyIOwningList_pol _to_native_pol_list(self,pythonList):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":243
 *         return (polynomials, orderIdeal)
 * 
 *     cdef _get_variables(self,pythonList):             # <<<<<<<<<<<<<<
 *         existing = pythonList.variables()
 *         ordered = pythonList.ring().gens()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._get_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_existing);
  __Pyx_XDECREF(__pyx_v_ordered);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":254
 *         return result
 * 
 *     cdef PyIOwningList_pol _to_native_pol_list(self,pythonList):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a python list of sage polynomials to a PyIOwningList_pol, which contains a pointer used for native calls
 */

static struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__to_native_pol_list(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_pythonList) {
  base::IOwningList<polynomial::IPolynomial_uint64 *> *__pyx_v_result;
  PyObject *__pyx_v_generator = NULL;
  PyObject *__pyx_v_values = NULL;
  polynomial::IPolynomial<uint64_t> *__pyx_v_pol;
  PyObject *__pyx_v_exponents = NULL;
  polynomial::IMonomial *__pyx_v_monomial;
  PyObject *__pyx_v_coef = NULL;
  PyObject *__pyx_v_expPos = NULL;
  PyObject *__pyx_v_exp = NULL;
  polynomial::Term<uint64_t> *__pyx_v_term;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_wrappedResult = NULL;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  base::OwningVector<polynomial::IPolynomial_uint64 *> *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  PyObject *(*__pyx_t_15)(PyObject *);
  int __pyx_t_16;
  unsigned int __pyx_t_17;
  uint64_t __pyx_t_18;
  polynomial::Term<uint64_t> *__pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_to_native_pol_list", 0);

  /* "sage/borderbasis/cppWrapper.pyx":268
 *             A PyIOwningList_pol, equivalent to the provided ``pythonList``
 *         """
 *         result = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())             # <<<<<<<<<<<<<<
 *         for generator in pythonList:
 *             values = self._get_dict(generator,self._get_variables(pythonList))
 */
  try {
    __pyx_t_1 = new base::OwningVector<polynomial::IPolynomial_uint64 *>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result = ((base::IOwningList<polynomial::IPolynomial_uint64 *> *)__pyx_t_1);

  /* "sage/borderbasis/cppWrapper.pyx":269
 *         """
 *         result = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())
 *         for generator in pythonList:             # <<<<<<<<<<<<<<
 *             values = self._get_dict(generator,self._get_variables(pythonList))
 *             pol = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 */
  if (PyList_CheckExact(__pyx_v_pythonList) || PyTuple_CheckExact(__pyx_v_pythonList)) {
    __pyx_t_2 = __pyx_v_pythonList; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_pythonList); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_generator, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":270
 *         result = <IOwningList[IPolynomial_uint64*]*>(new OwningVector[IPolynomial_uint64*]())
 *         for generator in pythonList:
 *             values = self._get_dict(generator,self._get_variables(pythonList))             # <<<<<<<<<<<<<<
 *             pol = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 *             for exponents in values:
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_get_variables(__pyx_v_self, __pyx_v_pythonList); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_get_dict(__pyx_v_self, __pyx_v_generator, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_values, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":271
 *         for generator in pythonList:
 *             values = self._get_dict(generator,self._get_variables(pythonList))
 *             pol = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)             # <<<<<<<<<<<<<<
 *             for exponents in values:
 *                 monomial = (<PyMonomialFactory>(self.monFactory)).thisptr.create()
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_self->indet); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_pol = __pyx_v_self->polFactory->thisptr->create(__pyx_t_7);

    /* "sage/borderbasis/cppWrapper.pyx":272
 *             values = self._get_dict(generator,self._get_variables(pythonList))
 *             pol = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 *             for exponents in values:             # <<<<<<<<<<<<<<
 *                 monomial = (<PyMonomialFactory>(self.monFactory)).thisptr.create()
 *                 coef = values[exponents]
 */
    if (PyList_CheckExact(__pyx_v_values) || PyTuple_CheckExact(__pyx_v_values)) {
      __pyx_t_6 = __pyx_v_values; __Pyx_INCREF(__pyx_t_6); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = Py_TYPE(__pyx_t_6)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_6)) {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_5 = __pyx_t_9(__pyx_t_6);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_exponents, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":273
 *             pol = (<PyPolynomialFactory_uint64>(self.polFactory)).thisptr.create(self.indet)
 *             for exponents in values:
 *                 monomial = (<PyMonomialFactory>(self.monFactory)).thisptr.create()             # <<<<<<<<<<<<<<
 *                 coef = values[exponents]
 *                 try:
 */
      __pyx_v_monomial = __pyx_v_self->monFactory->thisptr->create();

      /* "sage/borderbasis/cppWrapper.pyx":274
 *             for exponents in values:
 *                 monomial = (<PyMonomialFactory>(self.monFactory)).thisptr.create()
 *                 coef = values[exponents]             # <<<<<<<<<<<<<<
 *                 try:
 *                     coef = (int)(coef.int_repr())
 */
      __pyx_t_5 = PyObject_GetItem(__pyx_v_values, __pyx_v_exponents); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_coef, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":275
 *                 monomial = (<PyMonomialFactory>(self.monFactory)).thisptr.create()
 *                 coef = values[exponents]
 *                 try:             # <<<<<<<<<<<<<<
 *                     coef = (int)(coef.int_repr())
 *                 except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "sage/borderbasis/cppWrapper.pyx":276
 *                 coef = values[exponents]
 *                 try:
 *                     coef = (int)(coef.int_repr())             # <<<<<<<<<<<<<<
 *                 except:
 *                     pass
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_coef, __pyx_n_s_int_repr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Int(__pyx_t_13); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF_SET(__pyx_v_coef, __pyx_t_5);
          __pyx_t_5 = 0;
        }
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":277
 *                 try:
 *                     coef = (int)(coef.int_repr())
 *                 except:             # <<<<<<<<<<<<<<
 *                     pass
 *                 for expPos in range(0,self.indet):
 */
        /*except:*/ {
          PyErr_Restore(0,0,0);
          goto __pyx_L8_exception_handled;
        }
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_L14_try_end:;
      }

      /* "sage/borderbasis/cppWrapper.pyx":279
 *                 except:
 *                     pass
 *                 for expPos in range(0,self.indet):             # <<<<<<<<<<<<<<
 *                     exp = exponents[expPos]
 *                     if(exp>0):
 */
      __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      __Pyx_INCREF(__pyx_v_self->indet);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_self->indet);
      __Pyx_GIVEREF(__pyx_v_self->indet);
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PyList_CheckExact(__pyx_t_13) || PyTuple_CheckExact(__pyx_t_13)) {
        __pyx_t_5 = __pyx_t_13; __Pyx_INCREF(__pyx_t_5); __pyx_t_14 = 0;
        __pyx_t_15 = NULL;
      } else {
        __pyx_t_14 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_15 = Py_TYPE(__pyx_t_5)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      for (;;) {
        if (!__pyx_t_15 && PyList_CheckExact(__pyx_t_5)) {
          if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_14); __Pyx_INCREF(__pyx_t_13); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_5, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_15 && PyTuple_CheckExact(__pyx_t_5)) {
          if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_14); __Pyx_INCREF(__pyx_t_13); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_5, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_13 = __pyx_t_15(__pyx_t_5);
          if (unlikely(!__pyx_t_13)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_13);
        }
        __Pyx_XDECREF_SET(__pyx_v_expPos, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":280
 *                     pass
 *                 for expPos in range(0,self.indet):
 *                     exp = exponents[expPos]             # <<<<<<<<<<<<<<
 *                     if(exp>0):
 *                         monomial = <IMonomial*>(monomial.set(expPos,exp))
 */
        __pyx_t_13 = PyObject_GetItem(__pyx_v_exponents, __pyx_v_expPos); if (unlikely(__pyx_t_13 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_XDECREF_SET(__pyx_v_exp, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":281
 *                 for expPos in range(0,self.indet):
 *                     exp = exponents[expPos]
 *                     if(exp>0):             # <<<<<<<<<<<<<<
 *                         monomial = <IMonomial*>(monomial.set(expPos,exp))
 *                 term = new Term[uint64_t](coef,monomial)
 */
        __pyx_t_13 = PyObject_RichCompare(__pyx_v_exp, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_16 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (__pyx_t_16) {

          /* "sage/borderbasis/cppWrapper.pyx":282
 *                     exp = exponents[expPos]
 *                     if(exp>0):
 *                         monomial = <IMonomial*>(monomial.set(expPos,exp))             # <<<<<<<<<<<<<<
 *                 term = new Term[uint64_t](coef,monomial)
 *                 pol.push(term)
 */
          __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_expPos); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_t_17 = __Pyx_PyInt_As_unsigned_int(__pyx_v_exp); if (unlikely((__pyx_t_17 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_v_monomial = ((polynomial::IMonomial *)__pyx_v_monomial->set(__pyx_t_7, __pyx_t_17));
          goto __pyx_L17;
        }
        __pyx_L17:;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":283
 *                     if(exp>0):
 *                         monomial = <IMonomial*>(monomial.set(expPos,exp))
 *                 term = new Term[uint64_t](coef,monomial)             # <<<<<<<<<<<<<<
 *                 pol.push(term)
 *             result.push_back(<IPolynomial_uint64*>(pol))
 */
      __pyx_t_18 = __Pyx_PyInt_As_uint64_t(__pyx_v_coef); if (unlikely((__pyx_t_18 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      try {
        __pyx_t_19 = new polynomial::Term<uint64_t>(__pyx_t_18, __pyx_v_monomial);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_v_term = __pyx_t_19;

      /* "sage/borderbasis/cppWrapper.pyx":284
 *                         monomial = <IMonomial*>(monomial.set(expPos,exp))
 *                 term = new Term[uint64_t](coef,monomial)
 *                 pol.push(term)             # <<<<<<<<<<<<<<
 *             result.push_back(<IPolynomial_uint64*>(pol))
 *         wrappedResult = PyIOwningList_pol()
 */
      __pyx_v_pol->push(__pyx_v_term);
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":285
 *                 term = new Term[uint64_t](coef,monomial)
 *                 pol.push(term)
 *             result.push_back(<IPolynomial_uint64*>(pol))             # <<<<<<<<<<<<<<
 *         wrappedResult = PyIOwningList_pol()
 *         wrappedResult.thisptr = result
 */
    __pyx_v_result->push_back(((polynomial::IPolynomial_uint64 *)__pyx_v_pol));
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":286
 *                 pol.push(term)
 *             result.push_back(<IPolynomial_uint64*>(pol))
 *         wrappedResult = PyIOwningList_pol()             # <<<<<<<<<<<<<<
 *         wrappedResult.thisptr = result
 *         return wrappedResult
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_wrappedResult = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":287
 *             result.push_back(<IPolynomial_uint64*>(pol))
 *         wrappedResult = PyIOwningList_pol()
 *         wrappedResult.thisptr = result             # <<<<<<<<<<<<<<
 *         return wrappedResult
 * 
 */
  __pyx_v_wrappedResult->thisptr = __pyx_v_result;

  /* "sage/borderbasis/cppWrapper.pyx":288
 *         wrappedResult = PyIOwningList_pol()
 *         wrappedResult.thisptr = result
 *         return wrappedResult             # <<<<<<<<<<<<<<
 * 
 *     cdef _from_native_pol_list(self,PyIOwningList_pol nativeList,ring,variables):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrappedResult));
  __pyx_r = __pyx_v_wrappedResult;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":254
 *         return result
 * 
 *     cdef PyIOwningList_pol _to_native_pol_list(self,pythonList):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a python list of sage polynomials to a PyIOwningList_pol, which contains a pointer used for native calls
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._to_native_pol_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_generator);
  __Pyx_XDECREF(__pyx_v_values);
  __Pyx_XDECREF(__pyx_v_exponents);
  __Pyx_XDECREF(__pyx_v_coef);
  __Pyx_XDECREF(__pyx_v_expPos);
  __Pyx_XDECREF(__pyx_v_exp);
  __Pyx_XDECREF((PyObject *)__pyx_v_wrappedResult);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":290
 *         return wrappedResult
 * 
 *     cdef _from_native_pol_list(self,PyIOwningList_pol nativeList,ring,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a C++ list of C++ polynomials to a python list of sage polynomials
 */

static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__from_native_pol_list(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *__pyx_v_nativeList, PyObject *__pyx_v_ring, PyObject *__pyx_v_variables) {
  PyObject *__pyx_v_polList = NULL;
  unsigned int __pyx_v_nativeListSize;
  long __pyx_v_polPos;
  polynomial::IPolynomial_uint64 *__pyx_v_pol;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *__pyx_v_polWrapper = NULL;
  PyObject *__pyx_v_sagePol = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_native_pol_list", 0);

  /* "sage/borderbasis/cppWrapper.pyx":306
 *             A python list of sage polynomials equivalent to ``nativeList``
 *         """
 *         polList = []             # <<<<<<<<<<<<<<
 *         nativeListSize = nativeList.thisptr.size()
 *         for polPos in range(0,nativeListSize):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_polList = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":307
 *         """
 *         polList = []
 *         nativeListSize = nativeList.thisptr.size()             # <<<<<<<<<<<<<<
 *         for polPos in range(0,nativeListSize):
 *             pol = nativeList.thisptr.at(polPos)
 */
  __pyx_v_nativeListSize = __pyx_v_nativeList->thisptr->size();

  /* "sage/borderbasis/cppWrapper.pyx":308
 *         polList = []
 *         nativeListSize = nativeList.thisptr.size()
 *         for polPos in range(0,nativeListSize):             # <<<<<<<<<<<<<<
 *             pol = nativeList.thisptr.at(polPos)
 *             polWrapper = PyIPolynomial_uint64()
 */
  __pyx_t_2 = __pyx_v_nativeListSize;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_polPos = __pyx_t_3;

    /* "sage/borderbasis/cppWrapper.pyx":309
 *         nativeListSize = nativeList.thisptr.size()
 *         for polPos in range(0,nativeListSize):
 *             pol = nativeList.thisptr.at(polPos)             # <<<<<<<<<<<<<<
 *             polWrapper = PyIPolynomial_uint64()
 *             polWrapper.thisptr = <IPolynomial[uint64_t]*>(pol)
 */
    __pyx_v_pol = __pyx_v_nativeList->thisptr->at(__pyx_v_polPos);

    /* "sage/borderbasis/cppWrapper.pyx":310
 *         for polPos in range(0,nativeListSize):
 *             pol = nativeList.thisptr.at(polPos)
 *             polWrapper = PyIPolynomial_uint64()             # <<<<<<<<<<<<<<
 *             polWrapper.thisptr = <IPolynomial[uint64_t]*>(pol)
 *             sagePol = self._from_native_pol(polWrapper,ring,variables)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_polWrapper, ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":311
 *             pol = nativeList.thisptr.at(polPos)
 *             polWrapper = PyIPolynomial_uint64()
 *             polWrapper.thisptr = <IPolynomial[uint64_t]*>(pol)             # <<<<<<<<<<<<<<
 *             sagePol = self._from_native_pol(polWrapper,ring,variables)
 *             polList.append(sagePol)
 */
    __pyx_v_polWrapper->thisptr = ((polynomial::IPolynomial<uint64_t> *)__pyx_v_pol);

    /* "sage/borderbasis/cppWrapper.pyx":312
 *             polWrapper = PyIPolynomial_uint64()
 *             polWrapper.thisptr = <IPolynomial[uint64_t]*>(pol)
 *             sagePol = self._from_native_pol(polWrapper,ring,variables)             # <<<<<<<<<<<<<<
 *             polList.append(sagePol)
 *         result = polList
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)__pyx_v_self->__pyx_vtab)->_from_native_pol(__pyx_v_self, __pyx_v_polWrapper, __pyx_v_ring, __pyx_v_variables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sagePol, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":313
 *             polWrapper.thisptr = <IPolynomial[uint64_t]*>(pol)
 *             sagePol = self._from_native_pol(polWrapper,ring,variables)
 *             polList.append(sagePol)             # <<<<<<<<<<<<<<
 *         result = polList
 *         return result
 */
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_polList, __pyx_v_sagePol); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "sage/borderbasis/cppWrapper.pyx":314
 *             sagePol = self._from_native_pol(polWrapper,ring,variables)
 *             polList.append(sagePol)
 *         result = polList             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_INCREF(__pyx_v_polList);
  __pyx_v_result = __pyx_v_polList;

  /* "sage/borderbasis/cppWrapper.pyx":315
 *             polList.append(sagePol)
 *         result = polList
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     cdef _from_native_pol(self,PyIPolynomial_uint64 nativePol,ring,variables):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":290
 *         return wrappedResult
 * 
 *     cdef _from_native_pol_list(self,PyIOwningList_pol nativeList,ring,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a C++ list of C++ polynomials to a python list of sage polynomials
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._from_native_pol_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_polList);
  __Pyx_XDECREF((PyObject *)__pyx_v_polWrapper);
  __Pyx_XDECREF(__pyx_v_sagePol);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":317
 *         return result
 * 
 *     cdef _from_native_pol(self,PyIPolynomial_uint64 nativePol,ring,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a C++ polynomial to a sage polynomial
 */

static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__from_native_pol(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *__pyx_v_nativePol, PyObject *__pyx_v_ring, PyObject *__pyx_v_variables) {
  PyObject *__pyx_v_sagePol = NULL;
  unsigned int __pyx_v_termSize;
  long __pyx_v_termPos;
  polynomial::Term<uint64_t> *__pyx_v_term;
  PyObject *__pyx_v_coef = NULL;
  polynomial::IMonomial *__pyx_v_monomial;
  unsigned int __pyx_v_monomialSize;
  PyObject *__pyx_v_sageMon = NULL;
  long __pyx_v_expPos;
  PyObject *__pyx_v_exp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  long __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  unsigned int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_from_native_pol", 0);

  /* "sage/borderbasis/cppWrapper.pyx":333
 *             A sage polynomial equivalent to the C++ polynomial
 *         """
 *         sagePol = var(variables[0])-var(variables[0])             # <<<<<<<<<<<<<<
 *         termSize = nativePol.thisptr.size()
 *         for termPos in range(0,termSize):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_var); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_variables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_var); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_variables, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_sagePol = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":334
 *         """
 *         sagePol = var(variables[0])-var(variables[0])
 *         termSize = nativePol.thisptr.size()             # <<<<<<<<<<<<<<
 *         for termPos in range(0,termSize):
 *             term = nativePol.thisptr.at(termPos)
 */
  __pyx_v_termSize = __pyx_v_nativePol->thisptr->size();

  /* "sage/borderbasis/cppWrapper.pyx":335
 *         sagePol = var(variables[0])-var(variables[0])
 *         termSize = nativePol.thisptr.size()
 *         for termPos in range(0,termSize):             # <<<<<<<<<<<<<<
 *             term = nativePol.thisptr.at(termPos)
 *             coef = term.getCoef()
 */
  __pyx_t_5 = __pyx_v_termSize;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_termPos = __pyx_t_6;

    /* "sage/borderbasis/cppWrapper.pyx":336
 *         termSize = nativePol.thisptr.size()
 *         for termPos in range(0,termSize):
 *             term = nativePol.thisptr.at(termPos)             # <<<<<<<<<<<<<<
 *             coef = term.getCoef()
 *             try:
 */
    __pyx_v_term = __pyx_v_nativePol->thisptr->at(__pyx_v_termPos);

    /* "sage/borderbasis/cppWrapper.pyx":337
 *         for termPos in range(0,termSize):
 *             term = nativePol.thisptr.at(termPos)
 *             coef = term.getCoef()             # <<<<<<<<<<<<<<
 *             try:
 *                 coef = ring.base_ring().fetch_int(coef)
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_term->getCoef()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_coef, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":338
 *             term = nativePol.thisptr.at(termPos)
 *             coef = term.getCoef()
 *             try:             # <<<<<<<<<<<<<<
 *                 coef = ring.base_ring().fetch_int(coef)
 *             except:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "sage/borderbasis/cppWrapper.pyx":339
 *             coef = term.getCoef()
 *             try:
 *                 coef = ring.base_ring().fetch_int(coef)             # <<<<<<<<<<<<<<
 *             except:
 *                 pass
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ring, __pyx_n_s_base_ring); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_fetch_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_coef);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_coef);
        __Pyx_GIVEREF(__pyx_v_coef);
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L5_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_coef, __pyx_t_2);
        __pyx_t_2 = 0;
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":340
 *             try:
 *                 coef = ring.base_ring().fetch_int(coef)
 *             except:             # <<<<<<<<<<<<<<
 *                 pass
 *             monomial = term.getMonomial()
 */
      /*except:*/ {
        PyErr_Restore(0,0,0);
        goto __pyx_L6_exception_handled;
      }
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L12_try_end:;
    }

    /* "sage/borderbasis/cppWrapper.pyx":342
 *             except:
 *                 pass
 *             monomial = term.getMonomial()             # <<<<<<<<<<<<<<
 *             monomialSize = monomial.getIndet()
 *             sageMon = 1
 */
    __pyx_v_monomial = __pyx_v_term->getMonomial();

    /* "sage/borderbasis/cppWrapper.pyx":343
 *                 pass
 *             monomial = term.getMonomial()
 *             monomialSize = monomial.getIndet()             # <<<<<<<<<<<<<<
 *             sageMon = 1
 *             for expPos in range(0,monomialSize):
 */
    __pyx_v_monomialSize = __pyx_v_monomial->getIndet();

    /* "sage/borderbasis/cppWrapper.pyx":344
 *             monomial = term.getMonomial()
 *             monomialSize = monomial.getIndet()
 *             sageMon = 1             # <<<<<<<<<<<<<<
 *             for expPos in range(0,monomialSize):
 *                 exp = monomial.at(expPos)
 */
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_XDECREF_SET(__pyx_v_sageMon, __pyx_int_1);

    /* "sage/borderbasis/cppWrapper.pyx":345
 *             monomialSize = monomial.getIndet()
 *             sageMon = 1
 *             for expPos in range(0,monomialSize):             # <<<<<<<<<<<<<<
 *                 exp = monomial.at(expPos)
 *                 sageMon = sageMon * (var(variables[expPos])**exp)
 */
    __pyx_t_10 = __pyx_v_monomialSize;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_expPos = __pyx_t_11;

      /* "sage/borderbasis/cppWrapper.pyx":346
 *             sageMon = 1
 *             for expPos in range(0,monomialSize):
 *                 exp = monomial.at(expPos)             # <<<<<<<<<<<<<<
 *                 sageMon = sageMon * (var(variables[expPos])**exp)
 *             sagePol = sagePol + coef * sageMon
 */
      __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_monomial->at(__pyx_v_expPos)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_exp, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":347
 *             for expPos in range(0,monomialSize):
 *                 exp = monomial.at(expPos)
 *                 sageMon = sageMon * (var(variables[expPos])**exp)             # <<<<<<<<<<<<<<
 *             sagePol = sagePol + coef * sageMon
 *         sagePol = polynomial(sagePol,ring)
 */
      __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_variables, __pyx_v_expPos, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Power(__pyx_t_1, __pyx_v_exp, Py_None); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_sageMon, __pyx_t_4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF_SET(__pyx_v_sageMon, __pyx_t_1);
      __pyx_t_1 = 0;
    }

    /* "sage/borderbasis/cppWrapper.pyx":348
 *                 exp = monomial.at(expPos)
 *                 sageMon = sageMon * (var(variables[expPos])**exp)
 *             sagePol = sagePol + coef * sageMon             # <<<<<<<<<<<<<<
 *         sagePol = polynomial(sagePol,ring)
 *         return sagePol
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_coef, __pyx_v_sageMon); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Add(__pyx_v_sagePol, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_sagePol, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "sage/borderbasis/cppWrapper.pyx":349
 *                 sageMon = sageMon * (var(variables[expPos])**exp)
 *             sagePol = sagePol + coef * sageMon
 *         sagePol = polynomial(sagePol,ring)             # <<<<<<<<<<<<<<
 *         return sagePol
 * 
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_polynomial); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_sagePol);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sagePol);
  __Pyx_GIVEREF(__pyx_v_sagePol);
  __Pyx_INCREF(__pyx_v_ring);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ring);
  __Pyx_GIVEREF(__pyx_v_ring);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_sagePol, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":350
 *             sagePol = sagePol + coef * sageMon
 *         sagePol = polynomial(sagePol,ring)
 *         return sagePol             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_dict(self,polynomial,variables):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_sagePol);
  __pyx_r = __pyx_v_sagePol;
  goto __pyx_L0;

  /* "sage/borderbasis/cppWrapper.pyx":317
 *         return result
 * 
 *     cdef _from_native_pol(self,PyIPolynomial_uint64 nativePol,ring,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Converts a C++ polynomial to a sage polynomial
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._from_native_pol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sagePol);
  __Pyx_XDECREF(__pyx_v_coef);
  __Pyx_XDECREF(__pyx_v_sageMon);
  __Pyx_XDECREF(__pyx_v_exp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "sage/borderbasis/cppWrapper.pyx":352
 *         return sagePol
 * 
 *     cdef _get_dict(self,polynomial,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Builds a dictionary from the given polynomial.
 */

static PyObject *__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__get_dict(CYTHON_UNUSED struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *__pyx_v_self, PyObject *__pyx_v_polynomial, PyObject *__pyx_v_variables) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_mapping = NULL;
  PyObject *__pyx_v_curPos = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_v_term = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_termCtr = NULL;
  PyObject *__pyx_v_coefficients = NULL;
  PyObject *__pyx_v_exps = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_coef = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_dict", 0);

  /* "sage/borderbasis/cppWrapper.pyx":365
 *             A dictionary describing the polynomial
 *         """
 *         if(type(polynomial)==BooleanPolynomial):             # <<<<<<<<<<<<<<
 *             result = {}
 *             mapping = {}
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_BooleanPolynomial); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_polynomial)), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "sage/borderbasis/cppWrapper.pyx":366
 *         """
 *         if(type(polynomial)==BooleanPolynomial):
 *             result = {}             # <<<<<<<<<<<<<<
 *             mapping = {}
 *             curPos = 0
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_result = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":367
 *         if(type(polynomial)==BooleanPolynomial):
 *             result = {}
 *             mapping = {}             # <<<<<<<<<<<<<<
 *             curPos = 0
 *             for var in variables:
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_mapping = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":368
 *             result = {}
 *             mapping = {}
 *             curPos = 0             # <<<<<<<<<<<<<<
 *             for var in variables:
 *                 mapping[var] = curPos
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_curPos = __pyx_int_0;

    /* "sage/borderbasis/cppWrapper.pyx":369
 *             mapping = {}
 *             curPos = 0
 *             for var in variables:             # <<<<<<<<<<<<<<
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1
 */
    if (PyList_CheckExact(__pyx_v_variables) || PyTuple_CheckExact(__pyx_v_variables)) {
      __pyx_t_2 = __pyx_v_variables; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_variables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":370
 *             curPos = 0
 *             for var in variables:
 *                 mapping[var] = curPos             # <<<<<<<<<<<<<<
 *                 curPos = curPos + 1
 *             for term in polynomial.terms():
 */
      if (unlikely(PyDict_SetItem(__pyx_v_mapping, __pyx_v_var, __pyx_v_curPos) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "sage/borderbasis/cppWrapper.pyx":371
 *             for var in variables:
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1             # <<<<<<<<<<<<<<
 *             for term in polynomial.terms():
 *                 key = [0]*(len(variables))
 */
      __pyx_t_1 = PyNumber_Add(__pyx_v_curPos, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_curPos, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":372
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1
 *             for term in polynomial.terms():             # <<<<<<<<<<<<<<
 *                 key = [0]*(len(variables))
 *                 for var in term.variables():
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_polynomial, __pyx_n_s_terms); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_term, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":373
 *                 curPos = curPos + 1
 *             for term in polynomial.terms():
 *                 key = [0]*(len(variables))             # <<<<<<<<<<<<<<
 *                 for var in term.variables():
 *                     key[mapping[var]] = 1 #only option in BooleanPolynomial
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_variables); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_1 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      { Py_ssize_t __pyx_temp;
        for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
          __Pyx_INCREF(__pyx_int_0);
          PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
        }
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":374
 *             for term in polynomial.terms():
 *                 key = [0]*(len(variables))
 *                 for var in term.variables():             # <<<<<<<<<<<<<<
 *                     key[mapping[var]] = 1 #only option in BooleanPolynomial
 *                 key = tuple(key)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_term, __pyx_n_s_variables); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {
        __pyx_t_1 = __pyx_t_7; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_1)) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_1)) {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_7); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_7 = __pyx_t_8(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":375
 *                 key = [0]*(len(variables))
 *                 for var in term.variables():
 *                     key[mapping[var]] = 1 #only option in BooleanPolynomial             # <<<<<<<<<<<<<<
 *                 key = tuple(key)
 *                 result[key] = 1
 */
        __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_mapping, __pyx_v_var); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(PyObject_SetItem(__pyx_v_key, __pyx_t_7, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":376
 *                 for var in term.variables():
 *                     key[mapping[var]] = 1 #only option in BooleanPolynomial
 *                 key = tuple(key)             # <<<<<<<<<<<<<<
 *                 result[key] = 1
 *             return result
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":377
 *                     key[mapping[var]] = 1 #only option in BooleanPolynomial
 *                 key = tuple(key)
 *                 result[key] = 1             # <<<<<<<<<<<<<<
 *             return result
 *         else:
 */
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_int_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":378
 *                 key = tuple(key)
 *                 result[key] = 1
 *             return result             # <<<<<<<<<<<<<<
 *         else:
 *             result = {}
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "sage/borderbasis/cppWrapper.pyx":380
 *             return result
 *         else:
 *             result = {}             # <<<<<<<<<<<<<<
 *             mapping = {}
 *             curPos = 0
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_result = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":381
 *         else:
 *             result = {}
 *             mapping = {}             # <<<<<<<<<<<<<<
 *             curPos = 0
 *             for var in variables:
 */
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_mapping = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":382
 *             result = {}
 *             mapping = {}
 *             curPos = 0             # <<<<<<<<<<<<<<
 *             for var in variables:
 *                 mapping[var] = curPos
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_curPos = __pyx_int_0;

    /* "sage/borderbasis/cppWrapper.pyx":383
 *             mapping = {}
 *             curPos = 0
 *             for var in variables:             # <<<<<<<<<<<<<<
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1
 */
    if (PyList_CheckExact(__pyx_v_variables) || PyTuple_CheckExact(__pyx_v_variables)) {
      __pyx_t_2 = __pyx_v_variables; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_variables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext;
    }
    for (;;) {
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_2)) {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_7 = __pyx_t_5(__pyx_t_2);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":384
 *             curPos = 0
 *             for var in variables:
 *                 mapping[var] = curPos             # <<<<<<<<<<<<<<
 *                 curPos = curPos + 1
 *             termCtr = 0
 */
      if (unlikely(PyDict_SetItem(__pyx_v_mapping, __pyx_v_var, __pyx_v_curPos) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "sage/borderbasis/cppWrapper.pyx":385
 *             for var in variables:
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1             # <<<<<<<<<<<<<<
 *             termCtr = 0
 *             coefficients = polynomial.coefficients()
 */
      __pyx_t_7 = PyNumber_Add(__pyx_v_curPos, __pyx_int_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF_SET(__pyx_v_curPos, __pyx_t_7);
      __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":386
 *                 mapping[var] = curPos
 *                 curPos = curPos + 1
 *             termCtr = 0             # <<<<<<<<<<<<<<
 *             coefficients = polynomial.coefficients()
 *             for term in polynomial.monomials():
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_v_termCtr = __pyx_int_0;

    /* "sage/borderbasis/cppWrapper.pyx":387
 *                 curPos = curPos + 1
 *             termCtr = 0
 *             coefficients = polynomial.coefficients()             # <<<<<<<<<<<<<<
 *             for term in polynomial.monomials():
 *                 key = [0]*(len(variables))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_polynomial, __pyx_n_s_coefficients); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_coefficients = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":388
 *             termCtr = 0
 *             coefficients = polynomial.coefficients()
 *             for term in polynomial.monomials():             # <<<<<<<<<<<<<<
 *                 key = [0]*(len(variables))
 *                 exps = term.exponents()[0]
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_polynomial, __pyx_n_s_monomials); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = Py_TYPE(__pyx_t_7)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_7)) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_7)) {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_7);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_term, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":389
 *             coefficients = polynomial.coefficients()
 *             for term in polynomial.monomials():
 *                 key = [0]*(len(variables))             # <<<<<<<<<<<<<<
 *                 exps = term.exponents()[0]
 *                 pos = -1
 */
      __pyx_t_6 = PyObject_Length(__pyx_v_variables); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_2 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      { Py_ssize_t __pyx_temp;
        for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
          __Pyx_INCREF(__pyx_int_0);
          PyList_SET_ITEM(__pyx_t_2, __pyx_temp, __pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
        }
      }
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":390
 *             for term in polynomial.monomials():
 *                 key = [0]*(len(variables))
 *                 exps = term.exponents()[0]             # <<<<<<<<<<<<<<
 *                 pos = -1
 *                 for var in term.variables():
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_term, __pyx_n_s_exponents); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_exps, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":391
 *                 key = [0]*(len(variables))
 *                 exps = term.exponents()[0]
 *                 pos = -1             # <<<<<<<<<<<<<<
 *                 for var in term.variables():
 *                     pos = pos + 1
 */
      __Pyx_INCREF(__pyx_int_neg_1);
      __Pyx_XDECREF_SET(__pyx_v_pos, __pyx_int_neg_1);

      /* "sage/borderbasis/cppWrapper.pyx":392
 *                 exps = term.exponents()[0]
 *                 pos = -1
 *                 for var in term.variables():             # <<<<<<<<<<<<<<
 *                     pos = pos + 1
 *                     while exps[pos]==0 and pos<len(exps):
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_term, __pyx_n_s_variables); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = Py_TYPE(__pyx_t_2)->tp_iternext;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (!__pyx_t_8 && PyList_CheckExact(__pyx_t_2)) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else if (!__pyx_t_8 && PyTuple_CheckExact(__pyx_t_2)) {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          #endif
        } else {
          __pyx_t_1 = __pyx_t_8(__pyx_t_2);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":393
 *                 pos = -1
 *                 for var in term.variables():
 *                     pos = pos + 1             # <<<<<<<<<<<<<<
 *                     while exps[pos]==0 and pos<len(exps):
 *                         pos = pos + 1
 */
        __pyx_t_1 = PyNumber_Add(__pyx_v_pos, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF_SET(__pyx_v_pos, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":394
 *                 for var in term.variables():
 *                     pos = pos + 1
 *                     while exps[pos]==0 and pos<len(exps):             # <<<<<<<<<<<<<<
 *                         pos = pos + 1
 *                     key[mapping[var]] = exps[pos]
 */
        while (1) {
          __pyx_t_1 = PyObject_GetItem(__pyx_v_exps, __pyx_v_pos); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (__pyx_t_3) {
            __pyx_t_10 = PyObject_Length(__pyx_v_exps); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __pyx_t_9 = PyInt_FromSsize_t(__pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = PyObject_RichCompare(__pyx_v_pos, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_11 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_12 = __pyx_t_11;
          } else {
            __pyx_t_12 = __pyx_t_3;
          }
          if (!__pyx_t_12) break;

          /* "sage/borderbasis/cppWrapper.pyx":395
 *                     pos = pos + 1
 *                     while exps[pos]==0 and pos<len(exps):
 *                         pos = pos + 1             # <<<<<<<<<<<<<<
 *                     key[mapping[var]] = exps[pos]
 *                 key = tuple(key)
 */
          __pyx_t_1 = PyNumber_Add(__pyx_v_pos, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_pos, __pyx_t_1);
          __pyx_t_1 = 0;
        }

        /* "sage/borderbasis/cppWrapper.pyx":396
 *                     while exps[pos]==0 and pos<len(exps):
 *                         pos = pos + 1
 *                     key[mapping[var]] = exps[pos]             # <<<<<<<<<<<<<<
 *                 key = tuple(key)
 *                 coef = 1
 */
        __pyx_t_1 = PyObject_GetItem(__pyx_v_exps, __pyx_v_pos); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_mapping, __pyx_v_var); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_9);
        if (unlikely(PyObject_SetItem(__pyx_v_key, __pyx_t_9, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":397
 *                         pos = pos + 1
 *                     key[mapping[var]] = exps[pos]
 *                 key = tuple(key)             # <<<<<<<<<<<<<<
 *                 coef = 1
 *                 try:
 */
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyTuple_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "sage/borderbasis/cppWrapper.pyx":398
 *                     key[mapping[var]] = exps[pos]
 *                 key = tuple(key)
 *                 coef = 1             # <<<<<<<<<<<<<<
 *                 try:
 *                     coef = (int)(coefficients[termCtr].int_repr())
 */
      __Pyx_INCREF(__pyx_int_1);
      __Pyx_XDECREF_SET(__pyx_v_coef, __pyx_int_1);

      /* "sage/borderbasis/cppWrapper.pyx":399
 *                 key = tuple(key)
 *                 coef = 1
 *                 try:             # <<<<<<<<<<<<<<
 *                     coef = (int)(coefficients[termCtr].int_repr())
 *                 except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        /*try:*/ {

          /* "sage/borderbasis/cppWrapper.pyx":400
 *                 coef = 1
 *                 try:
 *                     coef = (int)(coefficients[termCtr].int_repr())             # <<<<<<<<<<<<<<
 *                 except:
 *                     try:
 */
          __pyx_t_1 = PyObject_GetItem(__pyx_v_coefficients, __pyx_v_termCtr); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L18_error;};
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int_repr); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L18_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L18_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L18_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF_SET(__pyx_v_coef, __pyx_t_2);
          __pyx_t_2 = 0;
        }
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        goto __pyx_L25_try_end;
        __pyx_L18_error:;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "sage/borderbasis/cppWrapper.pyx":401
 *                 try:
 *                     coef = (int)(coefficients[termCtr].int_repr())
 *                 except:             # <<<<<<<<<<<<<<
 *                     try:
 *                         coef = (int)(coefficients[termCtr])
 */
        /*except:*/ {
          __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._get_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L20_except_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GOTREF(__pyx_t_9);

          /* "sage/borderbasis/cppWrapper.pyx":402
 *                     coef = (int)(coefficients[termCtr].int_repr())
 *                 except:
 *                     try:             # <<<<<<<<<<<<<<
 *                         coef = (int)(coefficients[termCtr])
 *                     except:
 */
          {
            __Pyx_ExceptionSave(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_16);
            __Pyx_XGOTREF(__pyx_t_17);
            __Pyx_XGOTREF(__pyx_t_18);
            /*try:*/ {

              /* "sage/borderbasis/cppWrapper.pyx":403
 *                 except:
 *                     try:
 *                         coef = (int)(coefficients[termCtr])             # <<<<<<<<<<<<<<
 *                     except:
 *                         pass
 */
              __pyx_t_19 = PyObject_GetItem(__pyx_v_coefficients, __pyx_v_termCtr); if (unlikely(__pyx_t_19 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L28_error;};
              __Pyx_GOTREF(__pyx_t_19);
              __pyx_t_20 = PyNumber_Int(__pyx_t_19); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L28_error;}
              __Pyx_GOTREF(__pyx_t_20);
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_DECREF_SET(__pyx_v_coef, __pyx_t_20);
              __pyx_t_20 = 0;
            }
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            goto __pyx_L35_try_end;
            __pyx_L28_error:;
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;

            /* "sage/borderbasis/cppWrapper.pyx":404
 *                     try:
 *                         coef = (int)(coefficients[termCtr])
 *                     except:             # <<<<<<<<<<<<<<
 *                         pass
 *                 result[key] = coef
 */
            /*except:*/ {
              PyErr_Restore(0,0,0);
              goto __pyx_L29_exception_handled;
            }
            __pyx_L29_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_17);
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_ExceptionReset(__pyx_t_16, __pyx_t_17, __pyx_t_18);
            __pyx_L35_try_end:;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L19_exception_handled;
        }
        __pyx_L20_except_error:;
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
        goto __pyx_L1_error;
        __pyx_L19_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
        __pyx_L25_try_end:;
      }

      /* "sage/borderbasis/cppWrapper.pyx":406
 *                     except:
 *                         pass
 *                 result[key] = coef             # <<<<<<<<<<<<<<
 *                 termCtr = termCtr + 1
 *             return result
 */
      if (unlikely(PyDict_SetItem(__pyx_v_result, __pyx_v_key, __pyx_v_coef) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "sage/borderbasis/cppWrapper.pyx":407
 *                         pass
 *                 result[key] = coef
 *                 termCtr = termCtr + 1             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
      __pyx_t_9 = PyNumber_Add(__pyx_v_termCtr, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF_SET(__pyx_v_termCtr, __pyx_t_9);
      __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "sage/borderbasis/cppWrapper.pyx":408
 *                 result[key] = coef
 *                 termCtr = termCtr + 1
 *             return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result);
    __pyx_r = __pyx_v_result;
    goto __pyx_L0;
  }

  /* "sage/borderbasis/cppWrapper.pyx":352
 *         return sagePol
 * 
 *     cdef _get_dict(self,polynomial,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Builds a dictionary from the given polynomial.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64._get_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_mapping);
  __Pyx_XDECREF(__pyx_v_curPos);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_term);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_termCtr);
  __Pyx_XDECREF(__pyx_v_coefficients);
  __Pyx_XDECREF(__pyx_v_exps);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_coef);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_17PyIOwningList_pol_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyIOwningList_pol"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 18)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_20PyIPolynomial_uint64_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyIPolynomial_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 25)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMonomialFactory(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMonomialFactory(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_17PyMonomialFactory_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMonomialFactory[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyMonomialFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyMonomialFactory"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMonomialFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 32)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMonomialFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMonomialFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_26PyPolynomialFactory_uint64_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyPolynomialFactory_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 54)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyField_uint64(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_14PyField_uint64_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyField_uint64(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyField_uint64[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyField_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyField_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyField_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 66)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyField_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyField_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyFieldFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyField_uint64(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyFieldFn(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_9PyFieldFn_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyField_uint64(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyFieldFn[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyFieldFn"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyFieldFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyFieldFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 73)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyFieldFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyFieldFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_22PyMatrixFactory_uint64_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyMatrixFactory_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 86)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyMatrixFactory_Fn_uint64_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyMatrixFactory_Fn_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 93)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBBConfig(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyBBConfig(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_10PyBBConfig_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyBBConfig[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyBBConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyBBConfig"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyBBConfig, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 106)\n\n    Parameter class, used to send C++ classes to python methods\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyBBConfig, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBBConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;

static PyObject *__pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)o);
  p->__pyx_vtab = __pyx_vtabptr_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;
  p->field = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *)Py_None); Py_INCREF(Py_None);
  p->matrixFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *)Py_None); Py_INCREF(Py_None);
  p->polFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)Py_None); Py_INCREF(Py_None);
  p->monFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)Py_None); Py_INCREF(Py_None);
  p->indet = Py_None; Py_INCREF(Py_None);
  p->optimizations = Py_None; Py_INCREF(Py_None);
  p->cfg = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64(PyObject *o) {
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *p = (struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->field);
  Py_CLEAR(p->matrixFactory);
  Py_CLEAR(p->polFactory);
  Py_CLEAR(p->monFactory);
  Py_CLEAR(p->indet);
  Py_CLEAR(p->optimizations);
  Py_CLEAR(p->cfg);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *p = (struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)o;
  if (p->field) {
    e = (*v)(((PyObject*)p->field), a); if (e) return e;
  }
  if (p->matrixFactory) {
    e = (*v)(((PyObject*)p->matrixFactory), a); if (e) return e;
  }
  if (p->polFactory) {
    e = (*v)(((PyObject*)p->polFactory), a); if (e) return e;
  }
  if (p->monFactory) {
    e = (*v)(((PyObject*)p->monFactory), a); if (e) return e;
  }
  if (p->indet) {
    e = (*v)(p->indet, a); if (e) return e;
  }
  if (p->optimizations) {
    e = (*v)(p->optimizations, a); if (e) return e;
  }
  if (p->cfg) {
    e = (*v)(((PyObject*)p->cfg), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *p = (struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *)o;
  tmp = ((PyObject*)p->field);
  p->field = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyField_uint64 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->matrixFactory);
  p->matrixFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->polFactory);
  p->polFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->monFactory);
  p->monFactory = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyMonomialFactory *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->indet);
  p->indet = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->optimizations);
  p->optimizations = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->cfg);
  p->cfg = ((struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBBConfig *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64[] = {
  {__Pyx_NAMESTR("get_statistics"), (PyCFunction)__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_5get_statistics, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_4get_statistics)},
  {__Pyx_NAMESTR("calculate_basis"), (PyCFunction)__pyx_pw_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_7calculate_basis, METH_O, __Pyx_DOCSTR(__pyx_doc_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_6calculate_basis)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64"), /*tp_name*/
  sizeof(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("File: sage/borderbasis/cppWrapper.pyx (starting at line 119)\n\n    Wrapping class for the C++ class ``BorderBasisTools``\n\n    INPUT::\n\n        - ``field`` -- the field to use during calculation\n        - ``polFactory`` -- the polynomial factory to use for generating polynomials\n        - ``monFactory`` -- the monomial factory to use for generating monomials\n        - ``optimizations`` -- a string describing which algorithm to use\n    \n    EXAMPLES::\n\n        sage: from sage.borderbasis.cppWrapper import *\n        sage: from sage.rings.polynomial.multi_polynomial_sequence import PolynomialSequence\n\n        sage: R.<x,y> = PolynomialRing(GF(2),2)\n        sage: F = PolynomialSequence([x*y,y**2+x],R)\n\n        sage: field = PyFieldFn(2)\n        sage: polynomialFactory = PyPolynomialFactory_uint64()\n        sage: monFactory = PyMonomialFactory()\n\n        sage: PyBorderBasisTools_uint64(field,polynomialFactory,monFactory,F.nvariables(),'enhanced')\n        <sage.borderbasis.cppWrapper.PyBorderBasisTools_uint64>\n\n    "), /*tp_doc*/
  __pyx_tp_traverse_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64, /*tp_traverse*/
  __pyx_tp_clear_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("cppWrapper"),
    __Pyx_DOCSTR(__pyx_k_File_sage_borderbasis_cppWrapper), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_BooleanPolynomial, __pyx_k_BooleanPolynomial, sizeof(__pyx_k_BooleanPolynomial), 0, 0, 1, 1},
  {&__pyx_n_s_PolynomialSequence, __pyx_k_PolynomialSequence, sizeof(__pyx_k_PolynomialSequence), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_base_ring, __pyx_k_base_ring, sizeof(__pyx_k_base_ring), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_basis, __pyx_k_calculate_basis, sizeof(__pyx_k_calculate_basis), 0, 0, 1, 1},
  {&__pyx_n_s_coefficients, __pyx_k_coefficients, sizeof(__pyx_k_coefficients), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_deglex, __pyx_k_deglex, sizeof(__pyx_k_deglex), 0, 0, 1, 1},
  {&__pyx_n_s_degrevlex, __pyx_k_degrevlex, sizeof(__pyx_k_degrevlex), 0, 0, 1, 1},
  {&__pyx_n_s_enhanced, __pyx_k_enhanced, sizeof(__pyx_k_enhanced), 0, 0, 1, 1},
  {&__pyx_n_s_experimental, __pyx_k_experimental, sizeof(__pyx_k_experimental), 0, 0, 1, 1},
  {&__pyx_n_s_exponents, __pyx_k_exponents, sizeof(__pyx_k_exponents), 0, 0, 1, 1},
  {&__pyx_n_s_fetch_int, __pyx_k_fetch_int, sizeof(__pyx_k_fetch_int), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_gens, __pyx_k_gens, sizeof(__pyx_k_gens), 0, 0, 1, 1},
  {&__pyx_n_s_get_statistics, __pyx_k_get_statistics, sizeof(__pyx_k_get_statistics), 0, 0, 1, 1},
  {&__pyx_n_s_gf2, __pyx_k_gf2, sizeof(__pyx_k_gf2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_improved_mutant, __pyx_k_improved_mutant, sizeof(__pyx_k_improved_mutant), 0, 0, 1, 1},
  {&__pyx_n_s_improved_mutant_linear, __pyx_k_improved_mutant_linear, sizeof(__pyx_k_improved_mutant_linear), 0, 0, 1, 1},
  {&__pyx_n_s_improved_mutant_optimistic, __pyx_k_improved_mutant_optimistic, sizeof(__pyx_k_improved_mutant_optimistic), 0, 0, 1, 1},
  {&__pyx_n_s_indet, __pyx_k_indet, sizeof(__pyx_k_indet), 0, 0, 1, 1},
  {&__pyx_n_s_indeterminates, __pyx_k_indeterminates, sizeof(__pyx_k_indeterminates), 0, 0, 1, 1},
  {&__pyx_n_s_int_repr, __pyx_k_int_repr, sizeof(__pyx_k_int_repr), 0, 0, 1, 1},
  {&__pyx_n_s_isNull, __pyx_k_isNull, sizeof(__pyx_k_isNull), 0, 0, 1, 1},
  {&__pyx_n_s_mFac, __pyx_k_mFac, sizeof(__pyx_k_mFac), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrixFactory, __pyx_k_matrixFactory, sizeof(__pyx_k_matrixFactory), 0, 0, 1, 1},
  {&__pyx_n_s_maxComparisons, __pyx_k_maxComparisons, sizeof(__pyx_k_maxComparisons), 0, 0, 1, 1},
  {&__pyx_n_s_maxMatrix, __pyx_k_maxMatrix, sizeof(__pyx_k_maxMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_minPolynomial, __pyx_k_minPolynomial, sizeof(__pyx_k_minPolynomial), 0, 0, 1, 1},
  {&__pyx_n_s_min_mutants_limit, __pyx_k_min_mutants_limit, sizeof(__pyx_k_min_mutants_limit), 0, 0, 1, 1},
  {&__pyx_n_s_monFac, __pyx_k_monFac, sizeof(__pyx_k_monFac), 0, 0, 1, 1},
  {&__pyx_n_s_monFactory, __pyx_k_monFactory, sizeof(__pyx_k_monFactory), 0, 0, 1, 1},
  {&__pyx_n_s_monomials, __pyx_k_monomials, sizeof(__pyx_k_monomials), 0, 0, 1, 1},
  {&__pyx_n_s_mutant, __pyx_k_mutant, sizeof(__pyx_k_mutant), 0, 0, 1, 1},
  {&__pyx_n_s_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 0, 1, 1},
  {&__pyx_n_s_opt, __pyx_k_opt, sizeof(__pyx_k_opt), 0, 0, 1, 1},
  {&__pyx_n_s_optimistic, __pyx_k_optimistic, sizeof(__pyx_k_optimistic), 0, 0, 1, 1},
  {&__pyx_kp_s_optimization_value, __pyx_k_optimization_value, sizeof(__pyx_k_optimization_value), 0, 0, 1, 0},
  {&__pyx_n_s_optimizations, __pyx_k_optimizations, sizeof(__pyx_k_optimizations), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_s_polFac, __pyx_k_polFac, sizeof(__pyx_k_polFac), 0, 0, 1, 1},
  {&__pyx_n_s_polFactory, __pyx_k_polFactory, sizeof(__pyx_k_polFactory), 0, 0, 1, 1},
  {&__pyx_n_s_polynomial, __pyx_k_polynomial, sizeof(__pyx_k_polynomial), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ring, __pyx_k_ring, sizeof(__pyx_k_ring), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_n_s_sage_calculus_var, __pyx_k_sage_calculus_var, sizeof(__pyx_k_sage_calculus_var), 0, 0, 1, 1},
  {&__pyx_n_s_sage_rings_polynomial_multi_poly, __pyx_k_sage_rings_polynomial_multi_poly, sizeof(__pyx_k_sage_rings_polynomial_multi_poly), 0, 0, 1, 1},
  {&__pyx_n_s_sage_rings_polynomial_pbori, __pyx_k_sage_rings_polynomial_pbori, sizeof(__pyx_k_sage_rings_polynomial_pbori), 0, 0, 1, 1},
  {&__pyx_n_s_sage_symbolic_expression_convers, __pyx_k_sage_symbolic_expression_convers, sizeof(__pyx_k_sage_symbolic_expression_convers), 0, 0, 1, 1},
  {&__pyx_n_s_terms, __pyx_k_terms, sizeof(__pyx_k_terms), 0, 0, 1, 1},
  {&__pyx_kp_s_unknown, __pyx_k_unknown, sizeof(__pyx_k_unknown), 0, 0, 1, 0},
  {&__pyx_n_s_use_gf2_reductions, __pyx_k_use_gf2_reductions, sizeof(__pyx_k_use_gf2_reductions), 0, 0, 1, 1},
  {&__pyx_n_s_use_pol_ex, __pyx_k_use_pol_ex, sizeof(__pyx_k_use_pol_ex), 0, 0, 1, 1},
  {&__pyx_n_s_use_pol_exclusion, __pyx_k_use_pol_exclusion, sizeof(__pyx_k_use_pol_exclusion), 0, 0, 1, 1},
  {&__pyx_n_s_use_positions, __pyx_k_use_positions, sizeof(__pyx_k_use_positions), 0, 0, 1, 1},
  {&__pyx_n_s_use_variable_exclusion, __pyx_k_use_variable_exclusion, sizeof(__pyx_k_use_variable_exclusion), 0, 0, 1, 1},
  {&__pyx_n_s_var, __pyx_k_var, sizeof(__pyx_k_var), 0, 0, 1, 1},
  {&__pyx_n_s_variable_exclusions, __pyx_k_variable_exclusions, sizeof(__pyx_k_variable_exclusions), 0, 0, 1, 1},
  {&__pyx_n_s_variables, __pyx_k_variables, sizeof(__pyx_k_variables), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcppWrapper(void); /*proto*/
PyMODINIT_FUNC initcppWrapper(void)
#else
PyMODINIT_FUNC PyInit_cppWrapper(void); /*proto*/
PyMODINIT_FUNC PyInit_cppWrapper(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cppWrapper(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("cppWrapper"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_File_sage_borderbasis_cppWrapper), 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_sage__borderbasis__cppWrapper) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "sage.borderbasis.cppWrapper")) {
      if (unlikely(PyDict_SetItemString(modules, "sage.borderbasis.cppWrapper", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyIOwningList_pol", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyIPolynomial_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMonomialFactory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyMonomialFactory.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyMonomialFactory", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMonomialFactory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMonomialFactory = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyMonomialFactory;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyPolynomialFactory_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyPolynomialFactory_uint64;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyField_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyField_uint64.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyField_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyField_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyField_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyField_uint64;
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn.tp_base = __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyField_uint64;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyFieldFn", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyFieldFn = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyFieldFn;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyMatrixFactory_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64;
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64.tp_base = __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_uint64;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyMatrixFactory_Fn_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyMatrixFactory_Fn_uint64;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyBBConfig) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyBBConfig.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyBBConfig", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyBBConfig) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyBBConfig = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyBBConfig;
  __pyx_vtabptr_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 = &__pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64.get_statistics = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, int __pyx_skip_dispatch))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_get_statistics;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64.calculate_basis = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *, int __pyx_skip_dispatch))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64_calculate_basis;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64._to_native_pol_list = (struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__to_native_pol_list;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64._from_native_pol_list = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIOwningList_pol *, PyObject *, PyObject *))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__from_native_pol_list;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64._from_native_pol = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyIPolynomial_uint64 *, PyObject *, PyObject *))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__from_native_pol;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64._get_dict = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *, PyObject *))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__get_dict;
  __pyx_vtable_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64._get_variables = (PyObject *(*)(struct __pyx_obj_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 *, PyObject *))__pyx_f_4sage_11borderbasis_10cppWrapper_25PyBorderBasisTools_uint64__get_variables;
  if (PyType_Ready(&__pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64.tp_dict, __pyx_vtabptr_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyBorderBasisTools_uint64", (PyObject *)&__pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64 = &__pyx_type_4sage_11borderbasis_10cppWrapper_PyBorderBasisTools_uint64;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "sage/borderbasis/cppWrapper.pyx":13
 * from libc.stdlib cimport malloc, free
 * from c_src cimport *
 * from sage.rings.polynomial.multi_polynomial_sequence import PolynomialSequence             # <<<<<<<<<<<<<<
 * from sage.calculus.var import var
 * from sage.symbolic.expression_conversions import polynomial
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PolynomialSequence);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PolynomialSequence);
  __Pyx_GIVEREF(__pyx_n_s_PolynomialSequence);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_rings_polynomial_multi_poly, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PolynomialSequence); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PolynomialSequence, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":14
 * from c_src cimport *
 * from sage.rings.polynomial.multi_polynomial_sequence import PolynomialSequence
 * from sage.calculus.var import var             # <<<<<<<<<<<<<<
 * from sage.symbolic.expression_conversions import polynomial
 * from sage.rings.polynomial.pbori import BooleanPolynomial
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_var);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_var);
  __Pyx_GIVEREF(__pyx_n_s_var);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sage_calculus_var, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_var, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":15
 * from sage.rings.polynomial.multi_polynomial_sequence import PolynomialSequence
 * from sage.calculus.var import var
 * from sage.symbolic.expression_conversions import polynomial             # <<<<<<<<<<<<<<
 * from sage.rings.polynomial.pbori import BooleanPolynomial
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_polynomial);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_polynomial);
  __Pyx_GIVEREF(__pyx_n_s_polynomial);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sage_symbolic_expression_convers, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_polynomial); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_polynomial, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":16
 * from sage.calculus.var import var
 * from sage.symbolic.expression_conversions import polynomial
 * from sage.rings.polynomial.pbori import BooleanPolynomial             # <<<<<<<<<<<<<<
 * 
 * cdef class PyIOwningList_pol:
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BooleanPolynomial);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BooleanPolynomial);
  __Pyx_GIVEREF(__pyx_n_s_BooleanPolynomial);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sage_rings_polynomial_pbori, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BooleanPolynomial); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BooleanPolynomial, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":146
 * 
 *     """
 *     def __cinit__(self,PyField_uint64 field,PyMatrixFactory_uint64 matrixFactory,PyPolynomialFactory_uint64 polFactory,PyMonomialFactory monFactory,indeterminates,optimizations,use_pol_exclusion=False,use_variable_exclusion=False,variable_exclusions=[False,],use_gf2_reductions=True,min_mutants_limit=0):             # <<<<<<<<<<<<<<
 *         self.field = field
 *         self.matrixFactory = matrixFactory
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_False);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_False);
  __Pyx_GIVEREF(Py_False);
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "sage/borderbasis/cppWrapper.pyx":352
 *         return sagePol
 * 
 *     cdef _get_dict(self,polynomial,variables):             # <<<<<<<<<<<<<<
 *         r"""
 *         Builds a dictionary from the given polynomial.
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    __Pyx_AddTraceback("init sage.borderbasis.cppWrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init sage.borderbasis.cppWrapper");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int) -1;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (unsigned int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int) -1;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(unsigned int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(unsigned int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(unsigned int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong)
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long, PyLong_AsLong)
            } else if (sizeof(uint64_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_DATA_SIZE(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
